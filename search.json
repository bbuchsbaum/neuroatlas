[{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/neuroatlas-overview.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with neuroatlas","text":"neuroatlas package provides unified interface working neuroimaging atlases parcellations R. Whether ’re conducting ROI-based analyses, visualizing brain data, integrating different parcellation schemes, neuroatlas streamlines tasks consistent, user-friendly functions. Key features include: Multiple Atlas Support: Access Schaefer, Glasser, FreeSurfer ASEG, Olsen MTL atlases Flexible Resampling: Transform atlases different spaces resolutions ROI Analysis: Extract analyze specific regions interest Visualization: Integration ggseg beautiful brain visualizations TemplateFlow Integration: Access standardized templates spaces","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/neuroatlas-overview.html","id":"schaefer-cortical-atlas","dir":"Articles","previous_headings":"Loading Atlases","what":"Schaefer Cortical Atlas","title":"Getting Started with neuroatlas","text":"Schaefer atlas provides cortical parcellations organized functional networks. ’s available multiple resolutions (100-1000 parcels) network configurations (7 17 networks). atlas object contains: - atlas: parcellation volume (ClusteredNeuroVol) - labels: Region names - ids: Numeric region identifiers - network: Network assignment region - hemi: Hemisphere designation (“left” “right”) - cmap: Color map visualization","code":"# Load Schaefer atlas with 200 parcels and 7 networks atlas_200_7 <- get_schaefer_atlas(parcels = \"200\", networks = \"7\") print(atlas_200_7)  # Use convenience functions for common configurations atlas_400_17 <- sy_400_17()  # 400 parcels, 17 networks"},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/neuroatlas-overview.html","id":"glasser-multi-modal-parcellation","dir":"Articles","previous_headings":"Loading Atlases","what":"Glasser Multi-Modal Parcellation","title":"Getting Started with neuroatlas","text":"Glasser atlas provides 360 cortical areas defined using multi-modal MRI data:","code":"# Load the Glasser atlas glasser <- get_glasser_atlas() print(glasser)  # Check the number of regions length(glasser$labels)  # 360 regions table(glasser$hemi)     # 180 per hemisphere"},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/neuroatlas-overview.html","id":"freesurfer-aseg-subcortical-atlas","dir":"Articles","previous_headings":"Loading Atlases","what":"FreeSurfer ASEG Subcortical Atlas","title":"Getting Started with neuroatlas","text":"subcortical structures, use ASEG (Automatic Segmentation) atlas:","code":"# Load ASEG subcortical atlas aseg <- get_aseg_atlas() print(aseg)  # View available subcortical structures head(aseg$labels) # [1] \"Thalamus\" \"Caudate\" \"Putamen\" \"Pallidum\" \"Hippocampus\" \"Amygdala\""},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/neuroatlas-overview.html","id":"olsen-medial-temporal-lobe-atlas","dir":"Articles","previous_headings":"Loading Atlases","what":"Olsen Medial Temporal Lobe Atlas","title":"Getting Started with neuroatlas","text":"detailed MTL parcellations:","code":"# Load Olsen MTL atlas mtl <- get_olsen_mtl() print(mtl)  # Get hippocampus-specific parcellation with anterior-posterior divisions hipp <- get_hipp_atlas(apsections = 3)  # Divide into 3 A-P sections"},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/neuroatlas-overview.html","id":"resampling-atlases-to-different-spaces","dir":"Articles","previous_headings":"","what":"Resampling Atlases to Different Spaces","title":"Getting Started with neuroatlas","text":"Often need atlases specific space resolution. resample function handles : can also use TemplateFlow space identifiers:","code":"# Define a target space (e.g., 2mm isotropic) target_space <- neuroim2::NeuroSpace(   dim = c(91, 109, 91),   spacing = c(2, 2, 2),   origin = c(-90, -126, -72),   axes = diag(3) )  # Resample atlas to target space atlas_2mm <- resample(atlas_200_7$atlas, target_space)  # Or specify the space when loading atlas_in_space <- get_schaefer_atlas(   parcels = \"200\",    networks = \"7\",   outspace = target_space ) # Resample to MNI152NLin2009cAsym space at 2mm atlas_mni <- get_schaefer_atlas(   parcels = \"200\",   networks = \"7\",    outspace = \"MNI152NLin2009cAsym\",  # TemplateFlow space ID   resolution = \"2\" )"},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/neuroatlas-overview.html","id":"extracting-specific-rois","dir":"Articles","previous_headings":"Working with Regions of Interest","what":"Extracting Specific ROIs","title":"Getting Started with neuroatlas","text":"Extract individual regions label ID:","code":"# Extract hippocampus from ASEG atlas hippocampus <- get_roi(aseg, label = \"Hippocampus\")  # Extract by numeric ID thalamus <- get_roi(aseg, id = 1)  # Extract multiple regions subcortical <- get_roi(aseg, label = c(\"Hippocampus\", \"Amygdala\", \"Thalamus\"))"},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/neuroatlas-overview.html","id":"reducing-data-by-atlas-regions","dir":"Articles","previous_headings":"Working with Regions of Interest","what":"Reducing Data by Atlas Regions","title":"Getting Started with neuroatlas","text":"Use reduce_atlas summarize neuroimaging data within atlas regions:","code":"# Create example brain data brain_data <- neuroim2::NeuroVol(   rnorm(prod(dim(atlas_200_7$atlas))),    space = neuroim2::space(atlas_200_7$atlas) )  # Calculate mean values within each region region_means <- reduce_atlas(atlas_200_7, brain_data, mean) print(head(region_means))  # Calculate other statistics region_sds <- reduce_atlas(atlas_200_7, brain_data, sd, na.rm = TRUE) region_max <- reduce_atlas(atlas_200_7, brain_data, max)  # Custom function region_robust_mean <- reduce_atlas(   atlas_200_7,    brain_data,    function(x) mean(x, trim = 0.1) )"},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/neuroatlas-overview.html","id":"mapping-values-to-atlas-regions","dir":"Articles","previous_headings":"Working with Regions of Interest","what":"Mapping Values to Atlas Regions","title":"Getting Started with neuroatlas","text":"Map statistical values back onto atlas regions visualization:","code":"# Simulate some statistical values for each region n_regions <- length(atlas_200_7$labels) t_values <- rnorm(n_regions, mean = 0, sd = 2)  # Map values to atlas (threshold at ±1.96) atlas_mapped <- map_atlas(   atlas_200_7,    vals = t_values,    thresh = c(1.96, Inf)  # Only show |t| > 1.96 )  # For Glasser atlas glasser_vals <- rnorm(360) glasser_mapped <- map_atlas(glasser, glasser_vals, thresh = c(2, 5))"},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/neuroatlas-overview.html","id":"using-ggseg-for-2d-brain-plots","dir":"Articles","previous_headings":"Visualization","what":"Using ggseg for 2D Brain Plots","title":"Getting Started with neuroatlas","text":"package integrates ggseg publication-quality visualizations:","code":"# Visualize Schaefer atlas with random values vals <- rnorm(200) ggseg_schaefer(   atlas_200_7,    vals = vals,   thresh = c(-2, 2),     # Threshold values   palette = \"RdBu\",      # Color palette   interactive = TRUE     # Interactive plot with tooltips )  # Visualize Glasser atlas plot(glasser, vals = rnorm(360), thresh = c(-1, 1))"},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/neuroatlas-overview.html","id":"interactive-3d-visualization-glasser","dir":"Articles","previous_headings":"Visualization","what":"Interactive 3D Visualization (Glasser)","title":"Getting Started with neuroatlas","text":"Glasser atlas, use echarts-based 3D visualization:","code":"# Create random data for visualization glasser_data <- data.frame(   label = glasser$labels,   value = rnorm(360, sd = 2) )  # Create interactive 3D plot plot_glasser(vals = glasser_data, value_col = \"value\")  # Uniform coloring (no data) plot_glasser()  # All regions colored uniformly"},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/neuroatlas-overview.html","id":"merging-multiple-atlases","dir":"Articles","previous_headings":"Combining and Dilating Atlases","what":"Merging Multiple Atlases","title":"Getting Started with neuroatlas","text":"Combine atlases comprehensive coverage:","code":"# Combine cortical and subcortical atlases cortical <- get_schaefer_atlas(parcels = \"100\", networks = \"7\") subcortical <- get_aseg_atlas()  # Ensure same space subcortical_resampled <- get_aseg_atlas(outspace = neuroim2::space(cortical$atlas))  # Merge atlases combined <- merge_atlases(cortical, subcortical_resampled) print(combined)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/neuroatlas-overview.html","id":"dilating-atlas-parcels","dir":"Articles","previous_headings":"Combining and Dilating Atlases","what":"Dilating Atlas Parcels","title":"Getting Started with neuroatlas","text":"Fill gaps parcels using dilation:","code":"# Dilate parcels to fill gaps dilated <- dilate_atlas(   atlas = cortical,   mask = \"MNI152NLin2009cAsym\",  # Use standard brain mask   radius = 2,                      # Dilation radius in voxels   maxn = 20                        # Max neighbors to consider )  # Use custom mask brain_mask <- get_template(   space = \"MNI152NLin2009cAsym\",   variant = \"mask\",   resolution = \"1\" ) dilated_custom <- dilate_atlas(cortical, mask = brain_mask, radius = 3)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/neuroatlas-overview.html","id":"surface-based-atlases","dir":"Articles","previous_headings":"","what":"Surface-Based Atlases","title":"Getting Started with neuroatlas","text":"Work surface-based versions atlases:","code":"# Get Schaefer atlas on fsaverage6 surface surf_atlas <- get_schaefer_surfatlas(   parcels = \"400\",   networks = \"17\",   surf = \"inflated\"  # \"inflated\", \"white\", or \"pial\" )  # Access hemisphere data lh_regions <- surf_atlas$lh_atlas rh_regions <- surf_atlas$rh_atlas  # Surface atlases integrate with neurosurf package # for surface-based analyses"},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/neuroatlas-overview.html","id":"roi-based-analysis-pipeline","dir":"Articles","previous_headings":"Common Workflows","what":"ROI-Based Analysis Pipeline","title":"Getting Started with neuroatlas","text":"","code":"# 1. Load atlas atlas <- get_schaefer_atlas(parcels = \"200\", networks = \"7\")  # 2. Load your brain data # brain_data <- neuroim2::read_vol(\"my_statistical_map.nii.gz\")  # 3. Extract values by region roi_values <- reduce_atlas(atlas, brain_data, mean)  # 4. Statistical analysis # Identify significant regions sig_regions <- roi_values$value[abs(roi_values$value) > 2]  # 5. Visualize results viz_vals <- rep(0, length(atlas$labels)) viz_vals[abs(roi_values$value) > 2] <- roi_values$value[abs(roi_values$value) > 2] ggseg_schaefer(atlas, vals = viz_vals, interactive = TRUE)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/neuroatlas-overview.html","id":"multi-atlas-comparison","dir":"Articles","previous_headings":"Common Workflows","what":"Multi-Atlas Comparison","title":"Getting Started with neuroatlas","text":"","code":"# Compare parcellations at different resolutions atlas_100 <- sy_100_7() atlas_200 <- sy_200_7()  atlas_400 <- sy_400_7()  # Extract same data with different parcellations values_100 <- reduce_atlas(atlas_100, brain_data, mean) values_200 <- reduce_atlas(atlas_200, brain_data, mean) values_400 <- reduce_atlas(atlas_400, brain_data, mean)  # Compare results across resolutions # Higher resolution captures more spatial detail"},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/neuroatlas-overview.html","id":"network-based-analysis","dir":"Articles","previous_headings":"Common Workflows","what":"Network-Based Analysis","title":"Getting Started with neuroatlas","text":"","code":"# Analyze by functional network atlas <- get_schaefer_atlas(parcels = \"200\", networks = \"17\")  # Extract values roi_values <- reduce_atlas(atlas, brain_data, mean)  # Add network information roi_values$network <- atlas$network[match(roi_values$region_id, atlas$ids)]  # Summarize by network library(dplyr) network_summary <- roi_values %>%   group_by(network) %>%   summarise(     mean_value = mean(value),     sd_value = sd(value),     n_regions = n()   )  print(network_summary)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/neuroatlas-overview.html","id":"tips-and-best-practices","dir":"Articles","previous_headings":"","what":"Tips and Best Practices","title":"Getting Started with neuroatlas","text":"Space Consistency: Always ensure atlas data space analysis Resolution Choice: Higher parcellation counts provide spatial detail may reduce statistical power Visualization: Use interactive = TRUE exploratory analysis, FALSE publication figures Caching: Atlas files cached locally first download speed subsequent use Memory: Large atlases high resolution can memory-intensive; consider downsampling needed","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/neuroatlas-overview.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Getting Started with neuroatlas","text":"neuroatlas package provides comprehensive toolkit neuroimaging atlas work: Unified Interface: Consistent functions across different atlases Flexible Options: Multiple parcellation schemes resolutions Integration: Works seamlessly neuroim2, ggseg, TemplateFlow Visualization: 2D 3D options different atlases Analysis Ready: Built-functions ROI extraction data reduction advanced usage, see TemplateFlow integration vignette package documentation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/working-with-templateflow.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Working with TemplateFlow in neuroatlas","text":"TemplateFlow repository curated neuroimaging templates atlases, accessible via Python client. neuroatlas package provides R interface TemplateFlow, allowing easily discover, download, use resources within R workflows. vignette provides guide using TemplateFlow functionalities neuroatlas.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/working-with-templateflow.html","id":"getting-started-the-templateflow-object","dir":"Articles","previous_headings":"","what":"Getting Started: The templateflow Object","title":"Working with TemplateFlow in neuroatlas","text":"main entry point interacting TemplateFlow creating templateflow interface object. object manages connection Python API caching configurations. Python templateflow module available, ’ll need install first: Running print(tf) (tf successfully created) show : - local cache path TemplateFlow files stored. neuroatlas sets user-specific directory (e.g., ~/.cache/neuroatlas/templateflow Linux). - status connection Python API. - examples available templates total count. Output might look like: (Note: exact cache path template list may vary.) underlying Python TemplateFlow library uses TEMPLATEFLOW_HOME environment variable determine storage location. neuroatlas attempts set managed cache path centralize downloads.","code":"# Create a templateflow interface object tf <- create_templateflow() print(tf) # Install the Python templateflow package install_templateflow() #> <neuroatlas TemplateFlow Interface> #>   Cache Path:  /Users/youruser/Library/Caches/org.R-project.R/R/neuroatlas/templateflow  #>   API Status:  Connected (Python API handle initialized)  #>   Available Templates (Examples):  AMYGDALA, ARA, BRODMANN, CHARITE, Fischer344, ... (Total: 76)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/working-with-templateflow.html","id":"discovering-templates-and-metadata","dir":"Articles","previous_headings":"","what":"Discovering Templates and Metadata","title":"Working with TemplateFlow in neuroatlas","text":"fetching files, might want see ’s available.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/working-with-templateflow.html","id":"listing-available-template-spaces","dir":"Articles","previous_headings":"Discovering Templates and Metadata","what":"Listing Available Template Spaces","title":"Working with TemplateFlow in neuroatlas","text":"Use tflow_spaces() get list top-level template space identifiers: Example output: can also filter list pattern (regular expression): Example output:","code":"# List all available template spaces all_templates <- tflow_spaces() print(head(all_templates)) cat(\"Total templates available:\", length(all_templates), \"\\n\") #> [1] \"AMYGDALA\" \"ARA\"      \"BRODMANN\" \"CHARITE\"  \"Fischer344\" \"GS\" #> Total templates available: 76 # Find all MNI templates mni_templates <- tflow_spaces(pattern = \"MNI\") print(mni_templates) #> [1] \"MNI152Lin\"           \"MNI152NLin2009cAsym\" \"MNI152NLin6Asym\"     #> [4] \"MNI152NLin6Sym\"      \"MNIInfant\"           \"MNIPediatricAsym\""},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/working-with-templateflow.html","id":"listing-specific-files-metadata-query","dir":"Articles","previous_headings":"Discovering Templates and Metadata","what":"Listing Specific Files (Metadata Query)","title":"Working with TemplateFlow in neuroatlas","text":"find specific files within template space based metadata (like suffix, resolution, description), use tflow_files(): function returns character vector full paths files TemplateFlow download/cached.","code":"# Find all T1w images for the 'MNI152NLin2009cAsym' space mni_t1w_files <- tflow_files(   space = \"MNI152NLin2009cAsym\",   query_args = list(suffix = \"T1w\") ) print(head(mni_t1w_files))  # Find brain masks for 'MNI152NLin2009cAsym' at 1mm resolution mni_brain_masks <- tflow_files(   space = \"MNI152NLin2009cAsym\",   query_args = list(suffix = \"mask\", desc = \"brain\", resolution = \"1\") ) print(mni_brain_masks)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/working-with-templateflow.html","id":"fetching-templates-with-get_template","dir":"Articles","previous_headings":"","what":"Fetching Templates with get_template()","title":"Working with TemplateFlow in neuroatlas","text":"primary function fetching template files get_template(). provides flexible R interface TemplateFlow archive.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/working-with-templateflow.html","id":"basic-retrieval-volumetric-data","dir":"Articles","previous_headings":"Fetching Templates with get_template()","what":"Basic Retrieval (Volumetric Data)","title":"Working with TemplateFlow in neuroatlas","text":"get default MNI T1-weighted brain template (1mm resolution): vignette, ’ll simulate object: fetch specific template space, suffix, resolution:","code":"# Get the default template (MNI152NLin2009cAsym T1w brain at 1mm) mni_t1w <- get_template()  print(mni_t1w) #> [1] \"MNI152NLin2009cAsym_T1w\" # Get MNI T1w template at 2mm resolution mni_t1w_res2 <- get_template(   space = \"MNI152NLin2009cAsym\",    suffix = \"T1w\",    resolution = \"2\" # or 2 ) print(mni_t1w_res2)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/working-with-templateflow.html","id":"fetching-other-variants-e-g--masks","dir":"Articles","previous_headings":"Fetching Templates with get_template()","what":"Fetching Other Variants (e.g., Masks)","title":"Working with TemplateFlow in neuroatlas","text":"can specify TemplateFlow entities like desc (description) label.","code":"# Get brain mask for MNI template mni_brain_mask <- get_template(   space = \"MNI152NLin2009cAsym\",   desc = \"brain\", # 'brain' for brain masks   suffix = \"mask\",   resolution = \"1\" ) print(mni_brain_mask)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/working-with-templateflow.html","id":"getting-file-paths-only","dir":"Articles","previous_headings":"Fetching Templates with get_template()","what":"Getting File Paths Only","title":"Working with TemplateFlow in neuroatlas","text":"need path file (e.g., use tools), set path_only = TRUE: Example output (path vary):","code":"# Get just the file path, not the loaded NeuroVol object mni_t1w_path <- get_template(   space = \"MNI152NLin2009cAsym\",    suffix = \"T1w\",    path_only = TRUE ) print(mni_t1w_path) [1] \"/Users/youruser/Library/Caches/org.R-project.R/R/neuroatlas/templateflow/tpl-MNI152NLin2009cAsym/tpl-MNI152NLin2009cAsym_res-01_T1w.nii.gz\""},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/working-with-templateflow.html","id":"vectorized-retrieval","dir":"Articles","previous_headings":"Fetching Templates with get_template()","what":"Vectorized Retrieval","title":"Working with TemplateFlow in neuroatlas","text":"get_template() allows one space, variant, modality, resolution, label vector, returning named list results.","code":"# Get both 1mm and 2mm resolution templates t1_multi_res <- get_template(   space = \"MNI152NLin2009cAsym\",    suffix = \"T1w\",   resolution = c(\"1\", \"2\") # Get both 1mm and 2mm ) print(names(t1_multi_res)) # Access individual resolutions print(t1_multi_res[[\"1\"]]) # The 1mm NeuroVol print(t1_multi_res[[\"2\"]]) # The 2mm NeuroVol"},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/working-with-templateflow.html","id":"key-parameters-for-get_template","dir":"Articles","previous_headings":"Fetching Templates with get_template()","what":"Key Parameters for get_template()","title":"Working with TemplateFlow in neuroatlas","text":"space: Template identifier (e.g., “MNI152NLin2009cAsym”). variant: High-level type (e.g., “brain”, “mask”, “probseg”). Used infer desc suffix common cases. modality: Image type (e.g., “T1w”, “T2w”). Used infer suffix. resolution: Resolution (e.g., “1”, “2”, “01”). desc: Specific TemplateFlow desc field. suffix: Specific TemplateFlow suffix field. label: E.g., variant=\"probseg\", tissue labels like “GM”, “CSF”. atlas: E.g., “Schaefer2018” fetching atlas file. ...: BIDS-like entities (e.g., hemi=\"L\", den=\"32k\") can passed. function performs pre-flight validation checks space resolution information available TemplateFlow.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/working-with-templateflow.html","id":"typed-helper-functions","dir":"Articles","previous_headings":"","what":"Typed Helper Functions","title":"Working with TemplateFlow in neuroatlas","text":"common tasks, neuroatlas provides convenient wrappers:","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/working-with-templateflow.html","id":"volumetric-data-with-get_volume_template","dir":"Articles","previous_headings":"Typed Helper Functions","what":"Volumetric Data with get_volume_template()","title":"Working with TemplateFlow in neuroatlas","text":"Supported types include “T1w”, “T2w”, “bold”, “probseg”, “dseg”.","code":"# Get T1-weighted volume using the convenience function t1_vol <- get_volume_template(   template = \"MNI152NLin2009cAsym\",    type = \"T1w\",    resolution = \"1\" ) print(t1_vol)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/working-with-templateflow.html","id":"surface-data-with-get_surface_template","dir":"Articles","previous_headings":"Typed Helper Functions","what":"Surface Data with get_surface_template()","title":"Working with TemplateFlow in neuroatlas","text":"helper typically returns file paths, surfaces often handled specialized geometry software. Example output (path vary):","code":"# Get fsLR left hemisphere pial surface fslr_pial_L_path <- get_surface_template(   template_id = \"fsLR\",       # e.g., \"fsaverage\", \"fsLR\"   surface_type = \"pial\",      # e.g., \"pial\", \"white\", \"inflated\"   hemi = \"L\",                 # \"L\" or \"R\"   density = \"32k\"             # e.g., \"32k\", \"164k\" (for fsLR) ) print(fslr_pial_L_path) [1] \"/Users/youruser/Library/Caches/org.R-project.R/R/neuroatlas/templateflow/tpl-fsLR/tpl-fsLR_den-32k_hemi-L_desc-pial_surf.gii\""},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/working-with-templateflow.html","id":"caching-behavior","dir":"Articles","previous_headings":"","what":"Caching Behavior","title":"Working with TemplateFlow in neuroatlas","text":"neuroatlas TemplateFlow employ multiple layers caching: 1. R-level Memoisation: get_template() memoises file paths resolves. request template identical parameters multiple times R session, path retrieved memory cache. path_only=FALSE, as_neurovol() (loads NIfTI file) also memoised, NeuroVol object cached memory session path read . 2. Python Disk Cache: underlying Python templateflow library maintains disk cache downloaded files. neuroatlas configures use directory like ~/.cache/neuroatlas/templateflow (path varies OS). file downloaded, subsequent requests (even new R sessions) use disk-cached version TEMPLATEFLOW_HOME remains consistent. can inspect manage neuroatlas-specific TemplateFlow cache:","code":"# Show the path to the cache directory cache_loc <- show_templateflow_cache_path() print(cache_loc)  # Clear the disk cache and R-level memoisation for TemplateFlow paths # clear_templateflow_cache()                 # Asks for confirmation if interactive # clear_templateflow_cache(confirm = FALSE)  # Clears without asking"},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/working-with-templateflow.html","id":"integration-with-other-neuroatlas-functions","dir":"Articles","previous_headings":"","what":"Integration with Other neuroatlas Functions","title":"Working with TemplateFlow in neuroatlas","text":"outspace argument functions like get_schaefer_atlas() can accept TemplateFlow identifiers: uses internal helper .resolve_template_input() fetch template extract NeuroSpace information.","code":"# Load Schaefer atlas resampled to a TemplateFlow space schaefer_in_mni <- get_schaefer_atlas(   parcels = \"100\",    networks = \"7\",   outspace = \"MNI152NLin2009cAsym\" # Resolves to default 1mm T1w brain )  # Or be more specific with a list: schaefer_in_mni_res2 <- get_schaefer_atlas(   parcels = \"100\",   networks = \"7\",   outspace = list(space = \"MNI152NLin2009cAsym\", resolution = \"2\") ) print(schaefer_in_mni_res2)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/working-with-templateflow.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Working with TemplateFlow in neuroatlas","text":"neuroatlas package provides comprehensive R interface TemplateFlow: Easy Setup: Use create_templateflow() initialize interface Discovery: Find templates tflow_spaces() tflow_files() Flexible Retrieval: Use get_template() various parameters Integration: Use TemplateFlow spaces directly atlas functions Caching: Automatic caching R Python levels","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/articles/working-with-templateflow.html","id":"further-information","dir":"Articles","previous_headings":"","what":"Further Information","title":"Working with TemplateFlow in neuroatlas","text":"details TemplateFlow , including full range available templates BIDS-inspired naming conventions, please visit TemplateFlow website.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bradley Buchsbaum. Author, maintainer.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Buchsbaum B (2025). neuroatlas: Neuroimaging Atlases Parcellations. R package version 0.1.0, https://github.com/bbuchsbaum/neuroatlas.","code":"@Manual{,   title = {neuroatlas: Neuroimaging Atlases and Parcellations},   author = {Bradley Buchsbaum},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/bbuchsbaum/neuroatlas}, }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/Schaefer17_200.html","id":null,"dir":"Reference","previous_headings":"","what":"Schaefer Atlas with 17 Networks and 200 Parcels — Schaefer17_200","title":"Schaefer Atlas with 17 Networks and 200 Parcels — Schaefer17_200","text":"Pre-loaded Schaefer cortical parcellation 200 regions organized 17 functional networks. atlas divides cerebral cortex based resting-state functional connectivity patterns.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/Schaefer17_200.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Schaefer Atlas with 17 Networks and 200 Parcels — Schaefer17_200","text":"","code":"Schaefer17_200"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/Schaefer17_200.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Schaefer Atlas with 17 Networks and 200 Parcels — Schaefer17_200","text":"list class 'schaefer' 'atlas' containing: name Character string \"schaefer17_200\" atlas ClusteredNeuroVol object parcellation cmap Data frame RGB color values visualization ids Integer vector region IDs (1:200) labels Character vector region labels orig_labels Original Schaefer labels network Network assignment region hemi Hemisphere designation ('left' 'right')","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/Schaefer17_200.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Schaefer Atlas with 17 Networks and 200 Parcels — Schaefer17_200","text":"https://github.com/ThomasYeoLab/CBIG/tree/master/stable_projects/brain_parcellation/Schaefer2018_LocalGlobal","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/Schaefer17_200.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Schaefer Atlas with 17 Networks and 200 Parcels — Schaefer17_200","text":"Schaefer, ., et al. (2018). Local-Global Parcellation Human Cerebral Cortex Intrinsic Functional Connectivity MRI. Cerebral Cortex, 28(9), 3095-3114.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/Schaefer17_200.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Schaefer Atlas with 17 Networks and 200 Parcels — Schaefer17_200","text":"","code":"# \\donttest{ data(Schaefer17_200) print(Schaefer17_200) #> # ggseg atlas #>    hemi  area                                      side    label atlas     ggseg #>    <chr> <chr>                                     <chr>   <chr> <chr> <list<ti> #>  1 left  Background.FreeSurfer_Defined_Medial_Wall lateral Back… Scha… [136 × 4] #>  2 left  VisCent_ExStr_3                           lateral 17Ne… Scha… [130 × 4] #>  3 left  VisCent_ExStr_5                           lateral 17Ne… Scha… [142 × 4] #>  4 left  VisCent_ExStr_6                           lateral 17Ne… Scha… [148 × 4] #>  5 left  VisCent_ExStr_7                           lateral 17Ne… Scha… [149 × 4] #>  6 left  VisCent_ExStr_8                           lateral 17Ne… Scha… [140 × 4] #>  7 left  VisCent_ExStr_9                           lateral 17Ne… Scha… [149 × 4] #>  8 left  VisCent_ExStr_11                          lateral 17Ne… Scha… [146 × 4] #>  9 left  SomMotA_2                                 lateral 17Ne… Scha… [145 × 4] #> 10 left  SomMotA_3                                 lateral 17Ne… Scha… [161 × 4] #> # ℹ 390 more rows table(Schaefer17_200$network) #> Warning: Unknown or uninitialised column: `network`. #> < table of extent 0 > # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/Schaefer17_400.html","id":null,"dir":"Reference","previous_headings":"","what":"Schaefer Atlas with 17 Networks and 400 Parcels — Schaefer17_400","title":"Schaefer Atlas with 17 Networks and 400 Parcels — Schaefer17_400","text":"Pre-loaded Schaefer cortical parcellation 400 regions organized 17 functional networks. atlas divides cerebral cortex based resting-state functional connectivity patterns.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/Schaefer17_400.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Schaefer Atlas with 17 Networks and 400 Parcels — Schaefer17_400","text":"","code":"Schaefer17_400"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/Schaefer17_400.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Schaefer Atlas with 17 Networks and 400 Parcels — Schaefer17_400","text":"list class 'schaefer' 'atlas' containing: name Character string \"schaefer17_400\" atlas ClusteredNeuroVol object parcellation cmap Data frame RGB color values visualization ids Integer vector region IDs (1:400) labels Character vector region labels orig_labels Original Schaefer labels network Network assignment region hemi Hemisphere designation ('left' 'right')","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/Schaefer17_400.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Schaefer Atlas with 17 Networks and 400 Parcels — Schaefer17_400","text":"https://github.com/ThomasYeoLab/CBIG/tree/master/stable_projects/brain_parcellation/Schaefer2018_LocalGlobal","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/Schaefer17_400.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Schaefer Atlas with 17 Networks and 400 Parcels — Schaefer17_400","text":"Schaefer, ., et al. (2018). Local-Global Parcellation Human Cerebral Cortex Intrinsic Functional Connectivity MRI. Cerebral Cortex, 28(9), 3095-3114.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/Schaefer17_400.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Schaefer Atlas with 17 Networks and 400 Parcels — Schaefer17_400","text":"","code":"# \\donttest{ data(Schaefer17_400) print(Schaefer17_400) #> # ggseg atlas #>    hemi  area                                      side    label atlas     ggseg #>    <chr> <chr>                                     <chr>   <chr> <chr> <list<ti> #>  1 left  Background.FreeSurfer_Defined_Medial_Wall lateral Back… Scha… [136 × 4] #>  2 left  VisCent_ExStr_3                           lateral 17Ne… Scha… [130 × 4] #>  3 left  VisCent_ExStr_5                           lateral 17Ne… Scha… [142 × 4] #>  4 left  VisCent_ExStr_6                           lateral 17Ne… Scha… [148 × 4] #>  5 left  VisCent_ExStr_7                           lateral 17Ne… Scha… [149 × 4] #>  6 left  VisCent_ExStr_8                           lateral 17Ne… Scha… [140 × 4] #>  7 left  VisCent_ExStr_9                           lateral 17Ne… Scha… [149 × 4] #>  8 left  VisCent_ExStr_11                          lateral 17Ne… Scha… [146 × 4] #>  9 left  SomMotA_2                                 lateral 17Ne… Scha… [145 × 4] #> 10 left  SomMotA_3                                 lateral 17Ne… Scha… [161 × 4] #> # ℹ 390 more rows table(Schaefer17_400$network) #> Warning: Unknown or uninitialised column: `network`. #> < table of extent 0 > # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/Schaefer17_600.html","id":null,"dir":"Reference","previous_headings":"","what":"Schaefer Atlas with 17 Networks and 600 Parcels — Schaefer17_600","title":"Schaefer Atlas with 17 Networks and 600 Parcels — Schaefer17_600","text":"Pre-loaded Schaefer cortical parcellation 600 regions organized 17 functional networks. atlas divides cerebral cortex based resting-state functional connectivity patterns.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/Schaefer17_600.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Schaefer Atlas with 17 Networks and 600 Parcels — Schaefer17_600","text":"","code":"Schaefer17_600"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/Schaefer17_600.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Schaefer Atlas with 17 Networks and 600 Parcels — Schaefer17_600","text":"list class 'schaefer' 'atlas' containing: name Character string \"schaefer17_600\" atlas ClusteredNeuroVol object parcellation cmap Data frame RGB color values visualization ids Integer vector region IDs (1:600) labels Character vector region labels orig_labels Original Schaefer labels network Network assignment region hemi Hemisphere designation ('left' 'right')","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/Schaefer17_600.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Schaefer Atlas with 17 Networks and 600 Parcels — Schaefer17_600","text":"https://github.com/ThomasYeoLab/CBIG/tree/master/stable_projects/brain_parcellation/Schaefer2018_LocalGlobal","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/Schaefer17_600.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Schaefer Atlas with 17 Networks and 600 Parcels — Schaefer17_600","text":"Schaefer, ., et al. (2018). Local-Global Parcellation Human Cerebral Cortex Intrinsic Functional Connectivity MRI. Cerebral Cortex, 28(9), 3095-3114.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/Schaefer17_600.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Schaefer Atlas with 17 Networks and 600 Parcels — Schaefer17_600","text":"","code":"# \\donttest{ data(Schaefer17_600) print(Schaefer17_600) #> # ggseg atlas #>    hemi  area                                      side    label atlas     ggseg #>    <chr> <chr>                                     <chr>   <chr> <chr> <list<ti> #>  1 left  Background.FreeSurfer_Defined_Medial_Wall lateral Back… Scha… [133 × 4] #>  2 left  VisCent_ExStr_5                           lateral 17Ne… Scha… [136 × 4] #>  3 left  VisCent_ExStr_7                           lateral 17Ne… Scha… [140 × 4] #>  4 left  VisCent_ExStr_8                           lateral 17Ne… Scha… [141 × 4] #>  5 left  VisCent_ExStr_9                           lateral 17Ne… Scha… [144 × 4] #>  6 left  VisCent_ExStr_10                          lateral 17Ne… Scha… [141 × 4] #>  7 left  VisCent_ExStr_11                          lateral 17Ne… Scha… [131 × 4] #>  8 left  VisCent_ExStr_12                          lateral 17Ne… Scha… [136 × 4] #>  9 left  VisCent_ExStr_14                          lateral 17Ne… Scha… [141 × 4] #> 10 left  VisCent_ExStr_16                          lateral 17Ne… Scha… [140 × 4] #> # ℹ 570 more rows table(Schaefer17_600$network) #> Warning: Unknown or uninitialised column: `network`. #> < table of extent 0 > # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/as_neurovol.html","id":null,"dir":"Reference","previous_headings":"","what":"Memoised version of .as_neurovol_unmemoised This is the function that should be called by get_template — as_neurovol","title":"Memoised version of .as_neurovol_unmemoised This is the function that should be called by get_template — as_neurovol","text":"Memoised version .as_neurovol_unmemoised function called get_template","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/as_neurovol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Memoised version of .as_neurovol_unmemoised This is the function that should be called by get_template — as_neurovol","text":"","code":"as_neurovol(path_or_py_obj)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/cash-.templateflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Access Attributes of the TemplateFlow Object — $.templateflow","title":"Access Attributes of the TemplateFlow Object — $.templateflow","text":"Allows R-native access (via $) attributes methods underlying Python TemplateFlow API object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/cash-.templateflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access Attributes of the TemplateFlow Object — $.templateflow","text":"","code":"# S3 method for class 'templateflow' x$name"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/cash-.templateflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access Attributes of the TemplateFlow Object — $.templateflow","text":"x object class templateflow. name name attribute method access Python object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/cash-.templateflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access Attributes of the TemplateFlow Object — $.templateflow","text":"attribute method Python TemplateFlow API object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/cash-.templateflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access Attributes of the TemplateFlow Object — $.templateflow","text":"","code":"if (FALSE) { # \\dontrun{   # Ensure Python and templateflow module are available   if (reticulate::py_available(initialize = TRUE) &&        reticulate::py_module_available(\"templateflow\")) {     tf <- create_templateflow()     # Example: Access the 'get' method (it's a Python function)     # print(tf$get)      # Example: List available templates (calls tf$api$templates())     # print(tf$templates())    } else {     message(\"Python or templateflow module not available. Skipping example.\")   } } # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/clear_templateflow_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear neuroatlas TemplateFlow Cache — clear_templateflow_cache","title":"Clear neuroatlas TemplateFlow Cache — clear_templateflow_cache","text":"Removes files subdirectories `neuroatlas` package's cache directory used TemplateFlow downloads. function also clears -memory memoisation cache TemplateFlow path lookups.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/clear_templateflow_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear neuroatlas TemplateFlow Cache — clear_templateflow_cache","text":"","code":"clear_templateflow_cache(confirm = TRUE)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/clear_templateflow_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear neuroatlas TemplateFlow Cache — clear_templateflow_cache","text":"confirm Logical. `TRUE` (default), function ask interactive confirmation deleting files session interactive. `FALSE`, session interactive, deletion proceed without confirmation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/clear_templateflow_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear neuroatlas TemplateFlow Cache — clear_templateflow_cache","text":"Invisibly returns `TRUE` cache cleared attempted cleared,   `FALSE` operation aborted user confirmation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/clear_templateflow_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clear neuroatlas TemplateFlow Cache — clear_templateflow_cache","text":"TemplateFlow cache directory typically located within path returned `tools::R_user_dir(\"neuroatlas\", \"cache\")`, subdirectory named \"templateflow\".","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/clear_templateflow_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clear neuroatlas TemplateFlow Cache — clear_templateflow_cache","text":"","code":"if (FALSE) { # \\dontrun{   # Clear the TemplateFlow cache (will ask for confirmation if interactive)   # clear_templateflow_cache()      # Clear without confirmation   # clear_templateflow_cache(confirm = FALSE) } # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/create_templateflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a TemplateFlow Interface Object — create_templateflow","title":"Create a TemplateFlow Interface Object — create_templateflow","text":"Initializes returns S3 object class templateflow acts gateway TemplateFlow Python API manages configurations.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/create_templateflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a TemplateFlow Interface Object — create_templateflow","text":"","code":"create_templateflow(cache_dir = NULL, verbosity = 0, default_template = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/create_templateflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a TemplateFlow Interface Object — create_templateflow","text":"cache_dir Optional. Path directory caching TemplateFlow downloads. NULL (default), uses neuroatlas-specific cache directory obtained via .neuroatlas_cache_dir(\"templateflow\"). also set TEMPLATEFLOW_HOME environment variable Python session. verbosity Optional. integer verbosity level (yet implemented). default_template Optional. string default template use (yet implemented).","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/create_templateflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a TemplateFlow Interface Object — create_templateflow","text":"S3 object class templateflow containing: api: raw Python TemplateFlow API handle reticulate. cache_path: R-side cache path used. options: list user-provided options.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/create_templateflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a TemplateFlow Interface Object — create_templateflow","text":"","code":"if (FALSE) { # \\dontrun{   # Ensure Python and templateflow module are available   if (reticulate::py_available(initialize = TRUE) &&        reticulate::py_module_available(\"templateflow\")) {     tf <- create_templateflow()     print(tf)   } else {     message(\"Python or templateflow module not available. Skipping example.\")   } } # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dilate_atlas.html","id":null,"dir":"Reference","previous_headings":"","what":"Dilate Atlas Parcellation Boundaries — dilate_atlas","title":"Dilate Atlas Parcellation Boundaries — dilate_atlas","text":"Expands boundaries brain atlas parcels dilating adjacent unassigned voxels within specified mask. useful filling small gaps parcels extending parcels neighboring regions.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dilate_atlas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dilate Atlas Parcellation Boundaries — dilate_atlas","text":"","code":"dilate_atlas(atlas, mask, radius = 4, maxn = 50)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dilate_atlas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dilate Atlas Parcellation Boundaries — dilate_atlas","text":"atlas object class \"atlas\" containing parcellation dilated mask binary mask (NeuroVol object) specifying valid voxels dilation. Dilation occur within non-zero mask values. Can also character string representing TemplateFlow space ID (e.g., \"MNI152NLin2009cAsym\"), case corresponding standard brain mask fetched TemplateFlow. Alternatively, can list arguments pass `neuroatlas::get_template` fetch specific mask. radius Numeric. maximum distance (voxels) search neighboring parcels dilating. Default: 4 maxn Integer. Maximum number neighboring voxels consider determining parcel assignment. Default: 50","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dilate_atlas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dilate Atlas Parcellation Boundaries — dilate_atlas","text":"ClusteredNeuroVol object containing dilated parcellation.   object maintains original label mappings may include additional   voxels existing parcels.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dilate_atlas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dilate Atlas Parcellation Boundaries — dilate_atlas","text":"dilation process: Identifies unassigned voxels within mask adjacent existing parcels unassigned voxel, finds nearby assigned voxels within specified radius Assigns unassigned voxel nearest parcel Respects mask boundaries prevent dilation unwanted regions function uses k-d tree implementation (via rflann) efficient nearest neighbor searches 3D space.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dilate_atlas.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dilate Atlas Parcellation Boundaries — dilate_atlas","text":"algorithm uses FLANN library efficient nearest neighbor searches: Muja, M., & Lowe, D. G. (2014). Scalable nearest neighbor algorithms high dimensional data. IEEE Transactions Pattern Analysis Machine Intelligence, 36(11), 2227-2240.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dilate_atlas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dilate Atlas Parcellation Boundaries — dilate_atlas","text":"","code":"if (FALSE) { # \\dontrun{ # Load an atlas atlas <- get_aseg_atlas()  # Use TemplateFlow brain mask dilated <- dilate_atlas(atlas, \"MNI152NLin2009cAsym\", radius = 4)  # More conservative dilation with fewer neighbors dilated_conservative <- dilate_atlas(atlas, \"MNI152NLin2009cAsym\", radius = 2, maxn = 20) } # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-as_neurovol_unmemoised.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Helper to Convert Python Object/Path to NeuroVol — .as_neurovol_unmemoised","title":"Internal Helper to Convert Python Object/Path to NeuroVol — .as_neurovol_unmemoised","text":"function takes file path (string) Python object can resolved NIfTI file path (e.g., Python Path object TemplateFlow) reads neuroim2::NeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-as_neurovol_unmemoised.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Helper to Convert Python Object/Path to NeuroVol — .as_neurovol_unmemoised","text":"","code":".as_neurovol_unmemoised(path_or_py_obj)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-as_neurovol_unmemoised.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Helper to Convert Python Object/Path to NeuroVol — .as_neurovol_unmemoised","text":"path_or_py_obj file path string Python object (e.g., pathlib.Path).","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-as_neurovol_unmemoised.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Helper to Convert Python Object/Path to NeuroVol — .as_neurovol_unmemoised","text":"neuroim2::NeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-check_templateflow_connectivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Check TemplateFlow Connectivity — .check_templateflow_connectivity","title":"Check TemplateFlow Connectivity — .check_templateflow_connectivity","text":"Internal function test TemplateFlow API accessible functioning. helps distinguish network issues problems.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-check_templateflow_connectivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check TemplateFlow Connectivity — .check_templateflow_connectivity","text":"","code":".check_templateflow_connectivity()"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-check_templateflow_connectivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check TemplateFlow Connectivity — .check_templateflow_connectivity","text":"Logical. TRUE TemplateFlow API accessible, FALSE otherwise.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-init_templateflow_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize and Get TemplateFlow API Handle — .init_templateflow_api","title":"Initialize and Get TemplateFlow API Handle — .init_templateflow_api","text":"Establishes connection Python TemplateFlow API via reticulate. Stores API handle cache path internal environment. also sets TEMPLATEFLOW_HOME environment variable ensure Python library uses neuroatlas-managed cache directory.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-init_templateflow_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize and Get TemplateFlow API Handle — .init_templateflow_api","text":"","code":".init_templateflow_api(cache_dir = NULL, force_reinit = FALSE)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-init_templateflow_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize and Get TemplateFlow API Handle — .init_templateflow_api","text":"cache_dir directory use caching TemplateFlow files managed neuroatlas. Defaults `.neuroatlas_cache_dir(\"templateflow\")`. provided, path used TEMPLATEFLOW_HOME. force_reinit Logical, whether force re-initialization Python API handle.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-init_templateflow_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize and Get TemplateFlow API Handle — .init_templateflow_api","text":"Invisibly returns TemplateFlow S3 object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-memoised_fetch_templateflow_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Memoised version of .perform_tf_get_and_convert_to_path — .memoised_fetch_templateflow_path","title":"Memoised version of .perform_tf_get_and_convert_to_path — .memoised_fetch_templateflow_path","text":"Memoised version .perform_tf_get_and_convert_to_path","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-memoised_fetch_templateflow_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Memoised version of .perform_tf_get_and_convert_to_path — .memoised_fetch_templateflow_path","text":"","code":".memoised_fetch_templateflow_path(tf_api_obj, query_params_list)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-neuroatlas_cache_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or Create neuroatlas Cache Directory — .neuroatlas_cache_dir","title":"Get or Create neuroatlas Cache Directory — .neuroatlas_cache_dir","text":"Returns path neuroatlas-specific cache directory. directory (specified subdirectory) exist, created. function uses `tools::R_user_dir` ensure user-specific, OS-appropriate cache location.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-neuroatlas_cache_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or Create neuroatlas Cache Directory — .neuroatlas_cache_dir","text":"","code":".neuroatlas_cache_dir(subdir = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-neuroatlas_cache_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or Create neuroatlas Cache Directory — .neuroatlas_cache_dir","text":"subdir Optional character string. provided, subdirectory named `subdir` created/used within main neuroatlas cache directory.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-neuroatlas_cache_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or Create neuroatlas Cache Directory — .neuroatlas_cache_dir","text":"character string representing path cache directory.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-perform_tf_get_and_convert_to_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform TemplateFlow API Call and Convert to Path — .perform_tf_get_and_convert_to_path","title":"Perform TemplateFlow API Call and Convert to Path — .perform_tf_get_and_convert_to_path","text":"Internal function calls Python TemplateFlow API's get() method, handles errors, converts result (potentially list paths) single R file path string. multiple paths returned TemplateFlow, warning issued first path used.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-perform_tf_get_and_convert_to_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform TemplateFlow API Call and Convert to Path — .perform_tf_get_and_convert_to_path","text":"","code":".perform_tf_get_and_convert_to_path(tf_api_obj, query_params_list)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-perform_tf_get_and_convert_to_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform TemplateFlow API Call and Convert to Path — .perform_tf_get_and_convert_to_path","text":"tf_api_obj Python TemplateFlow API object reticulate. query_params_list named list query parameters `tf_api_obj$get()`.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-perform_tf_get_and_convert_to_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform TemplateFlow API Call and Convert to Path — .perform_tf_get_and_convert_to_path","text":"single character string representing file path.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-resolve_template_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve Template Input to NeuroVol or NeuroSpace — .resolve_template_input","title":"Resolve Template Input to NeuroVol or NeuroSpace — .resolve_template_input","text":"internal helper function takes flexible input representing neuroimaging template resolves either `neuroim2::NeuroVol` object `neuroim2::NeuroSpace` object, typically fetching via `get_template()` already desired R object form.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-resolve_template_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve Template Input to NeuroVol or NeuroSpace — .resolve_template_input","text":"","code":".resolve_template_input(input, target_type = \"NeuroVol\", api_handle = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-resolve_template_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve Template Input to NeuroVol or NeuroSpace — .resolve_template_input","text":"input input resolve. Can : - `neuroim2::NeuroVol` object. - `neuroim2::NeuroSpace` object. - character string: Assumed TemplateFlow `space` identifier.   `get_template()` called space default values   parameters (e.g., `variant=\"brain\"`, `resolution=\"1\"`). - named list: Assumed arguments `get_template()`.   `.call(get_template, input)` used. target_type character string, either \"NeuroVol\" (default) \"NeuroSpace\", specifying desired output type. api_handle (Optional) existing `templateflow` S3 object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/dot-resolve_template_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve Template Input to NeuroVol or NeuroSpace — .resolve_template_input","text":"object `target_type`. `target_type` \"NeuroSpace\"   `NeuroVol` obtained, space extracted via `neuroim2::space()`.   Returns `NULL` stops error resolution fails.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/fsaverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Surface geometry for the fsaverage6 atlas — fsaverage","title":"Surface geometry for the fsaverage6 atlas — fsaverage","text":"list including left right hemispheres orig, white, inflated, pial surfaces.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/fsaverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Surface geometry for the fsaverage6 atlas — fsaverage","text":"","code":"data(fsaverage)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/fsaverage.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Surface geometry for the fsaverage6 atlas — fsaverage","text":"object class list length 7.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_aseg_atlas.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the FreeSurfer Subcortical Atlas (ASEG) — get_aseg_atlas","title":"Get the FreeSurfer Subcortical Atlas (ASEG) — get_aseg_atlas","text":"Loads returns FreeSurfer subcortical segmentation (ASEG) atlas, provides probabilistic labels key subcortical structures brain. atlas includes bilateral structures thalamus, caudate, putamen, limbic regions, well midline structures like brainstem.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_aseg_atlas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the FreeSurfer Subcortical Atlas (ASEG) — get_aseg_atlas","text":"","code":"get_aseg_atlas(outspace = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_aseg_atlas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the FreeSurfer Subcortical Atlas (ASEG) — get_aseg_atlas","text":"outspace Optional NeuroSpace object specifying desired output space resampling atlas. NULL (default), returns atlas native space.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_aseg_atlas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the FreeSurfer Subcortical Atlas (ASEG) — get_aseg_atlas","text":"list classes 'aseg' 'atlas' containing: atlas NeuroVol object containing 3D volume atlas labels cmap data frame RGB color specifications region ids Integer vector region IDs present atlas labels Character vector anatomical labels corresponding ID hemi Character vector indicating hemisphere ('left', 'right', NA) region","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_aseg_atlas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the FreeSurfer Subcortical Atlas (ASEG) — get_aseg_atlas","text":"ASEG atlas derived FreeSurfer's automatic subcortical segmentation algorithm transformed standard space. voxel contains integer ID corresponding specific anatomical structure. atlas includes major subcortical structures hemispheres: Bilateral deep gray structures (thalamus, caudate, putamen, pallidum) Limbic structures (hippocampus, amygdala) Ventral structures (nucleus accumbens, ventral diencephalon) Midline structures (brainstem)","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_aseg_atlas.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get the FreeSurfer Subcortical Atlas (ASEG) — get_aseg_atlas","text":"Fischl, B., et al. (2002). Whole brain segmentation: automated labeling neuroanatomical structures human brain. Neuron, 33(3), 341-355.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_aseg_atlas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the FreeSurfer Subcortical Atlas (ASEG) — get_aseg_atlas","text":"","code":"if (FALSE) { # \\dontrun{ # Load the atlas in native space aseg <- get_aseg_atlas()  # View the available region labels aseg$labels  # Get the unique region IDs aseg$ids } # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_ggseg_atlas.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ggseg-Compatible Schaefer Atlas — get_ggseg_atlas","title":"Get ggseg-Compatible Schaefer Atlas — get_ggseg_atlas","text":"Retrieves appropriate Schaefer atlas data structure compatible ggseg visualization based atlas name parameters.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_ggseg_atlas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ggseg-Compatible Schaefer Atlas — get_ggseg_atlas","text":"","code":"get_ggseg_atlas(atlas)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_ggseg_atlas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ggseg-Compatible Schaefer Atlas — get_ggseg_atlas","text":"atlas atlas object containing Schaefer parcellation information. name follow format \"schaeferN_M\" : N number networks (7 17) M number parcels (100 1000 steps 100)","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_ggseg_atlas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ggseg-Compatible Schaefer Atlas — get_ggseg_atlas","text":"ggseg brain atlas object visualization","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_ggseg_atlas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get ggseg-Compatible Schaefer Atlas — get_ggseg_atlas","text":"function extracts network count parcel count atlas name returns corresponding ggseg-compatible atlas object. Supports Schaefer atlases 7 17 networks 100-1000 parcels (steps 100).","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_glasser_atlas.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Glasser Atlas — get_glasser_atlas","title":"Load Glasser Atlas — get_glasser_atlas","text":"Retrieves loads Glasser360 cortical parcellation atlas PennBBL repository. atlas provides detailed parcellation human cerebral cortex based multi-modal neuroimaging data.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_glasser_atlas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Glasser Atlas — get_glasser_atlas","text":"","code":"get_glasser_atlas(outspace = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_glasser_atlas.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Load Glasser Atlas — get_glasser_atlas","text":"Atlas files downloaded : https://github.com/PennBBL/xcpEngine/tree/master/atlas/glasser360","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_glasser_atlas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Glasser Atlas — get_glasser_atlas","text":"outspace Optional NeuroSpace object specifying desired output space. provided, atlas resampled space. Default: NULL","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_glasser_atlas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Glasser Atlas — get_glasser_atlas","text":"list class 'glasser' 'atlas' containing: name Character string \"Glasser360\" atlas ClusteredNeuroVol object containing parcellation cmap Data frame RGB color specifications region ids Integer vector region IDs (1:360) labels Character vector anatomical labels hemi Character vector indicating hemisphere ('left' 'right')","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_glasser_atlas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load Glasser Atlas — get_glasser_atlas","text":"Glasser atlas divides hemisphere 180 areas (360 total) based cortical architecture, function, connectivity, topography. atlas downloaded PennBBL xcpEngine repository includes: Volume data MNI space Region labels hemisphere information Color specifications visualization","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_glasser_atlas.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Load Glasser Atlas — get_glasser_atlas","text":"Glasser, M. F., et al. (2016). multi-modal parcellation human cerebral cortex. Nature, 536(7615), 171-178.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_glasser_atlas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Glasser Atlas — get_glasser_atlas","text":"","code":"if (FALSE) { # \\dontrun{ # Load atlas in native space atlas <- get_glasser_atlas()  # View region labels head(atlas$labels)  # Check number of regions per hemisphere table(atlas$hemi) } # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_hipp_atlas.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Hippocampal Parcellation — get_hipp_atlas","title":"Extract Hippocampal Parcellation — get_hipp_atlas","text":"Creates hippocampus-specific atlas Olsen MTL atlas, optional anterior-posterior subdivisions.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_hipp_atlas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Hippocampal Parcellation — get_hipp_atlas","text":"","code":"get_hipp_atlas(outspace = NULL, apsections = 1)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_hipp_atlas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Hippocampal Parcellation — get_hipp_atlas","text":"outspace Optional NeuroSpace object resampling apsections Integer specifying number anterior-posterior divisions. Default: 1 (subdivision)","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_hipp_atlas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Hippocampal Parcellation — get_hipp_atlas","text":"list class c(\"hippocampus\", \"atlas\") containing: name Character string \"hippocampus\" atlas NeuroVol object hippocampal parcellation ids Integer vector region IDs labels Character vector region labels hemi Character vector hemisphere designations cmap Matrix RGB colors visualization orig_labels Full labels including hemisphere information","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_hipp_atlas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Hippocampal Parcellation — get_hipp_atlas","text":"function extracts hippocampal regions full MTL atlas can subdivide anterior-posterior segments. resulting atlas maintains bilateral organization can used targeted hippocampal analyses.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_hipp_atlas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Hippocampal Parcellation — get_hipp_atlas","text":"","code":"if (FALSE) { # \\dontrun{ # Basic hippocampal atlas hipp <- get_hipp_atlas()  # With anterior-posterior subdivisions hipp_ap <- get_hipp_atlas(apsections = 3) } # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_olsen_mtl.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Olsen MTL Atlas — get_olsen_mtl","title":"Load Olsen MTL Atlas — get_olsen_mtl","text":"Loads Olsen medial temporal lobe atlas optionally resamples different space.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_olsen_mtl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Olsen MTL Atlas — get_olsen_mtl","text":"","code":"get_olsen_mtl(outspace = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_olsen_mtl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Olsen MTL Atlas — get_olsen_mtl","text":"outspace Optional NeuroSpace object specifying desired output space. NULL (default), returns atlas native 1mm MNI space.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_olsen_mtl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Olsen MTL Atlas — get_olsen_mtl","text":"list class 'atlas' containing MTL parcellation","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_olsen_mtl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Olsen MTL Atlas — get_olsen_mtl","text":"","code":"# \\donttest{ # Load in native space mtl <- get_olsen_mtl()  # Load and resample to MNI152NLin2009cAsym space (requires neuroim2) # space <- neuroim2::read_template_space(\"MNI152NLin2009cAsym\") # mtl_resampled <- get_olsen_mtl(outspace = space) # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_roi.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a region of interest (ROI) from an atlas — get_roi","title":"Extract a region of interest (ROI) from an atlas — get_roi","text":"Extracts specific region interest atlas object based label, ID, hemisphere information.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_roi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a region of interest (ROI) from an atlas — get_roi","text":"","code":"get_roi(x, label = NULL, id = NULL, hemi = NULL)  # S3 method for class 'atlas' get_roi(x, label = NULL, id = NULL, hemi = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_roi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a region of interest (ROI) from an atlas — get_roi","text":"x atlas object label Character string specifying ROI label/name id Numeric ID ROI atlas hemi Character string specifying hemisphere ('left' 'right')","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_roi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a region of interest (ROI) from an atlas — get_roi","text":"Returns subset atlas containing specified ROI","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_roi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a region of interest (ROI) from an atlas — get_roi","text":"","code":"if (FALSE) { # \\dontrun{ # Load the aseg atlas atlas <- get_aseg_atlas()  # Extract the hippocampus ROI roi <- get_roi(atlas, label = \"Hippocampus\") } # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_schaefer_atlas.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Schaefer Brain Parcellation Atlas — get_schaefer_atlas","title":"Load Schaefer Brain Parcellation Atlas — get_schaefer_atlas","text":"Retrieves loads Schaefer brain parcellation atlas, provides data-driven parcellation cerebral cortex based local gradient global similarity approaches.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_schaefer_atlas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Schaefer Brain Parcellation Atlas — get_schaefer_atlas","text":"","code":"get_schaefer_atlas(   parcels = c(\"100\", \"200\", \"300\", \"400\", \"500\", \"600\", \"700\", \"800\", \"900\", \"1000\"),   networks = c(\"7\", \"17\"),   resolution = c(\"1\", \"2\"),   outspace = NULL,   smooth = FALSE,   use_cache = TRUE )  sy_100_7(   resolution = \"2\",   outspace = NULL,   smooth = FALSE,   use_cache = TRUE,   ... )  sy_100_17(   resolution = \"2\",   outspace = NULL,   smooth = FALSE,   use_cache = TRUE,   ... )  sy_200_7(   resolution = \"2\",   outspace = NULL,   smooth = FALSE,   use_cache = TRUE,   ... )  sy_200_17(   resolution = \"2\",   outspace = NULL,   smooth = FALSE,   use_cache = TRUE,   ... )  sy_300_7(   resolution = \"2\",   outspace = NULL,   smooth = FALSE,   use_cache = TRUE,   ... )  sy_300_17(   resolution = \"2\",   outspace = NULL,   smooth = FALSE,   use_cache = TRUE,   ... )  sy_400_7(   resolution = \"2\",   outspace = NULL,   smooth = FALSE,   use_cache = TRUE,   ... )  sy_400_17(   resolution = \"2\",   outspace = NULL,   smooth = FALSE,   use_cache = TRUE,   ... )  sy_500_7(   resolution = \"2\",   outspace = NULL,   smooth = FALSE,   use_cache = TRUE,   ... )  sy_500_17(   resolution = \"2\",   outspace = NULL,   smooth = FALSE,   use_cache = TRUE,   ... )  sy_600_7(   resolution = \"2\",   outspace = NULL,   smooth = FALSE,   use_cache = TRUE,   ... )  sy_600_17(   resolution = \"2\",   outspace = NULL,   smooth = FALSE,   use_cache = TRUE,   ... )  sy_700_7(   resolution = \"2\",   outspace = NULL,   smooth = FALSE,   use_cache = TRUE,   ... )  sy_700_17(   resolution = \"2\",   outspace = NULL,   smooth = FALSE,   use_cache = TRUE,   ... )  sy_800_7(   resolution = \"2\",   outspace = NULL,   smooth = FALSE,   use_cache = TRUE,   ... )  sy_800_17(   resolution = \"2\",   outspace = NULL,   smooth = FALSE,   use_cache = TRUE,   ... )  sy_900_7(   resolution = \"2\",   outspace = NULL,   smooth = FALSE,   use_cache = TRUE,   ... )  sy_900_17(   resolution = \"2\",   outspace = NULL,   smooth = FALSE,   use_cache = TRUE,   ... )  sy_1000_7(   resolution = \"2\",   outspace = NULL,   smooth = FALSE,   use_cache = TRUE,   ... )  sy_1000_17(   resolution = \"2\",   outspace = NULL,   smooth = FALSE,   use_cache = TRUE,   ... )"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_schaefer_atlas.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Load Schaefer Brain Parcellation Atlas — get_schaefer_atlas","text":"https://github.com/ThomasYeoLab/CBIG/","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_schaefer_atlas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Schaefer Brain Parcellation Atlas — get_schaefer_atlas","text":"parcels Character string specifying number parcels. Options: \"100\", \"200\", \"300\", \"400\", \"500\", \"600\", \"800\", \"1000\" networks Character string specifying network count. Options: \"7\", \"17\" resolution Character string specifying MNI space resolution mm. Options: \"1\", \"2\" outspace Optional NeuroSpace object resampling atlas smooth Logical. Whether smooth parcel boundaries resampling. Default: FALSE use_cache Logical. Whether cache downloaded files. Default: TRUE ... Additional arguments (currently unused, included consistency convenience functions)","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_schaefer_atlas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Schaefer Brain Parcellation Atlas — get_schaefer_atlas","text":"list classes c(\"schaefer\", \"volatlas\", \"atlas\") containing: name Character string identifying atlas version atlas ClusteredNeuroVol object containing parcellation cmap Data frame RGB colors visualization ids Integer vector region IDs labels Character vector region names orig_labels Original region labels source data network Network assignment region hemi Hemisphere designation region","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_schaefer_atlas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load Schaefer Brain Parcellation Atlas — get_schaefer_atlas","text":"Schaefer atlas offers multiple resolutions cortical parcellation (100-1000 parcels) two network versions (7 17 networks). atlas based resting-state functional connectivity 1489 subjects. Features include: Multiple granularity levels (100-1000 parcels) Network assignments (7 17 networks) Bilateral parcellation Available different resolutions (1mm 2mm)","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_schaefer_atlas.html","id":"convenience-functions","dir":"Reference","previous_headings":"","what":"Convenience Functions","title":"Load Schaefer Brain Parcellation Atlas — get_schaefer_atlas","text":"Shorthand functions provided common Schaefer atlas configurations. functions call get_schaefer_atlas parcels networks arguments pre-set. accept resolution (default \"2\"), outspace, smooth, use_cache, ... arguments. sy_100_7(): 100 parcels, 7 networks. sy_100_17(): 100 parcels, 17 networks. sy_200_7(): 200 parcels, 7 networks. sy_200_17(): 200 parcels, 17 networks. sy_300_7(): 300 parcels, 7 networks. sy_300_17(): 300 parcels, 17 networks. sy_400_7(): 400 parcels, 7 networks. sy_400_17(): 400 parcels, 17 networks. sy_500_7(): 500 parcels, 7 networks. sy_500_17(): 500 parcels, 17 networks. sy_600_7(): 600 parcels, 7 networks. sy_600_17(): 600 parcels, 17 networks. sy_800_7(): 800 parcels, 7 networks. sy_800_17(): 800 parcels, 17 networks. sy_1000_7(): 1000 parcels, 7 networks. sy_1000_17(): 1000 parcels, 17 networks.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_schaefer_atlas.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Load Schaefer Brain Parcellation Atlas — get_schaefer_atlas","text":"Schaefer, ., et al. (2018). Local-Global Parcellation Human Cerebral Cortex Intrinsic Functional Connectivity MRI. Cerebral Cortex, 28(9), 3095-3114.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_schaefer_atlas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Schaefer Brain Parcellation Atlas — get_schaefer_atlas","text":"","code":"if (FALSE) { # \\dontrun{ # Load 300-parcel atlas with 7 networks atlas <- get_schaefer_atlas(parcels = \"300\", networks = \"7\")  # Load high-resolution version atlas_hires <- get_schaefer_atlas(parcels = \"400\",                                  networks = \"17\",                                  resolution = \"1\")  # Resample to a different space new_space <- neuroim2::NeuroSpace(dim = c(91,109,91),                                  spacing = c(2,2,2)) atlas_resampled <- get_schaefer_atlas(parcels = \"300\",                                      outspace = new_space) } # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_schaefer_surfatlas.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Surface-Based Schaefer Atlas — get_schaefer_surfatlas","title":"Load Surface-Based Schaefer Atlas — get_schaefer_surfatlas","text":"Loads surface-based version Schaefer parcellation atlas, compatible FreeSurfer surface representations.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_schaefer_surfatlas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Surface-Based Schaefer Atlas — get_schaefer_surfatlas","text":"","code":"get_schaefer_surfatlas(   parcels = c(\"100\", \"200\", \"300\", \"400\", \"500\", \"600\", \"800\", \"1000\"),   networks = c(\"7\", \"17\"),   surf = c(\"inflated\", \"white\", \"pial\"),   use_cache = TRUE )"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_schaefer_surfatlas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Surface-Based Schaefer Atlas — get_schaefer_surfatlas","text":"parcels Character string specifying number parcels. Options: \"100\", \"200\", \"300\", \"400\", \"500\", \"600\", \"800\", \"1000\" networks Character string specifying network count. Options: \"7\", \"17\" surf Character string specifying surface type. Options: \"inflated\", \"white\", \"pial\" use_cache Logical. Whether cache downloaded files. Default: TRUE","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_schaefer_surfatlas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Surface-Based Schaefer Atlas — get_schaefer_surfatlas","text":"list classes c(\"schaefer\", \"surfatlas\", \"atlas\") containing: surf_type Surface type used lh_atlas Left hemisphere surface atlas rh_atlas Right hemisphere surface atlas name Atlas identifier cmap RGB color specifications ids Region IDs labels Region names orig_labels Original region labels network Network assignments hemi Hemisphere designations","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_schaefer_surfatlas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load Surface-Based Schaefer Atlas — get_schaefer_surfatlas","text":"Provides Schaefer parcellation mapped FreeSurfer surface meshes. atlas can loaded onto different surface representations (inflated, white, pial) maintains parcellation scheme volumetric version.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_schaefer_surfatlas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Surface-Based Schaefer Atlas — get_schaefer_surfatlas","text":"","code":"if (FALSE) { # \\dontrun{ # Load inflated surface atlas surf_atlas <- get_schaefer_surfatlas(parcels = \"300\",                                     networks = \"7\",                                     surf = \"inflated\")  # Load pial surface version pial_atlas <- get_schaefer_surfatlas(parcels = \"400\",                                     networks = \"17\",                                     surf = \"pial\") } # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch a Template from TemplateFlow — get_template","title":"Fetch a Template from TemplateFlow — get_template","text":"Unified function retrieve neuroimaging templates related files TemplateFlow repository. function provides R-native interface underlying Python templateflow.api.get() method.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch a Template from TemplateFlow — get_template","text":"","code":"get_template(   space = \"MNI152NLin2009cAsym\",   variant = \"brain\",   modality = \"T1w\",   resolution = 1,   cohort = NULL,   desc = NULL,   label = NULL,   atlas = NULL,   suffix = NULL,   extension = \".nii.gz\",   path_only = FALSE,   use_cache = TRUE,   api_handle = NULL,   ... )  get_surface_template(   template_id,   surface_type,   hemi,   density = NULL,   resolution = NULL,   ...,   load_as_path = TRUE )"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch a Template from TemplateFlow — get_template","text":"space Character string. primary TemplateFlow identifier template space (e.g., \"MNI152NLin2009cAsym\"). Default: \"MNI152NLin2009cAsym\". variant Character string. high-level descriptor common template types. Supported: \"brain\" (default), \"head\", \"mask\", \"probseg\", \"dseg\". used infer desc sometimes suffix explicitly provided. modality Character string. imaging modality primary suffix template file. Supported: \"T1w\" (default), \"T2w\", \"mask\" (often used variant=\"mask\"). used infer suffix explicitly provided. resolution (Optional) Character string specifying resolution, primarily fsaverage variants (e.g., \"06\" fsaverage6, `tpl-fsaverage_res-06...`). Passed `resolution` `get_template`. cohort Character string. Optional cohort identifier (e.g., \" अधोक्षज\"). desc Character string. Specific TemplateFlow desc field. provided, overrides desc inferred variant. label Character string. Specific TemplateFlow label field (e.g., \"GM\", \"WM\", \"CSF\" variant=\"probseg\" variant=\"dseg\"). atlas Character string. Specific TemplateFlow atlas field (e.g., \"Schaefer2018\"). suffix Character string. Specific TemplateFlow suffix field. provided, overrides suffix inferred modality variant. extension Character string. file extension. Default: \".nii.gz\". path_only Logical. TRUE, returns file path template string instead loading NeuroVol object. Default: FALSE. use_cache Logical. (Currently primarily future R-level memoisation). TemplateFlow's Python API caching. Default: `TRUE`. Actual R-level path memoisation now active. api_handle optional S3 object class `templateflow` obtained `create_templateflow()`. `NULL` (default), default instance created internally. ... Additional arguments passed directly Python `templateflow.api.get()` method (e.g., `raise_on_empty = TRUE`). allows specifying valid TemplateFlow query entity explicitly listed parameter (e.g., `hemi`, `den`). template_id main TemplateFlow template identifier surface (e.g., \"fsLR\", \"fsaverage\"). passed `space` argument `get_template`. surface_type character string indicating type surface retrieve. Common values include: \"pial\", \"white\", \"inflated\", \"midthickness\", \"sphere\". passed `desc` argument `get_template`. hemi Character string, \"L\" left hemisphere \"R\" right hemisphere. Passed `hemi` `get_template`. density (Optional) Character string specifying surface density (e.g., \"32k\" fsLR, \"164k\" fsaverage). Passed `den` `get_template`. load_as_path Logical, whether return path file. Defaults `TRUE` `NeuroVol` objects typically used surface geometry. `FALSE`, attempts load using `as_neurovol` (via `get_template`).","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch a Template from TemplateFlow — get_template","text":"`space`, `variant`, `modality`, `resolution`, `label` vectors   length > 1 (one vectorized per call), named list results returned.   names list elements correspond values vectorized parameter.   parameters scalar (vectors length 1), single neuroim2::NeuroVol object   file path string returned directly (depending path_only). `load_as_path` `TRUE`, character string (path) list character strings (paths).         `load_as_path` `FALSE`, result `as_neurovol` (might `NeuroVol`         `neuroim2::read_vol` supports format, error ).         Returns `NULL` template found.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch a Template from TemplateFlow — get_template","text":"function performs several pre-flight checks:   - Validates existence specified `space` using `tf$api$templates()`.   - Validates specified `resolution` available resolutions `space` using `tf$api$resolutions()`.   - checks issue warnings may skipped necessary metadata retrieved TemplateFlow. Caching behavior:   - function uses `memoise` cache resolved file paths TemplateFlow R level current session.   - underlying Python TemplateFlow library also maintains disk cache, typically configured via     `TEMPLATEFLOW_HOME` environment variable (package helps manage).","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch a Template from TemplateFlow — get_template","text":"","code":"if (FALSE) { # \\dontrun{   # Ensure Python and templateflow module are available   if (reticulate::py_available(initialize = TRUE) &&        reticulate::py_module_available(\"templateflow\")) {          # Get default MNI T1w brain template (scalar call)     mni_brain <- get_template()     print(mni_brain)      # Vectorized call: Get MNI brain and mask variants     # mni_variants <- get_template(variant = c(\"brain\", \"mask\"))     # print(names(mni_variants))     # print(mni_variants$brain)     # print(mni_variants$mask)      # Vectorized call: Get MNI T1w at 1mm and 2mm resolutions     # mni_resolutions <- get_template(resolution = c(1, 2))     # print(mni_resolutions$`1`)     # print(mni_resolutions$`2`)      # Vectorized call: Get GM and CSF probseg for MNI     # mni_probsegs <- get_template(variant = \"probseg\", label = c(\"GM\", \"CSF\"))     # print(mni_probsegs$GM)      # Path only example with vectorization     # mni_mask_paths <- get_template(space = \"MNI152NLin2009cAsym\",      #                              variant = \"mask\",      #                              resolution = c(1,2),      #                              path_only = TRUE)     # print(mni_mask_paths)    } else {     message(\"Python or templateflow module not available. Skipping example.\")   } } # } # \\donttest{   # Get the pial surface for the left hemisphere of fsLR 32k template (as path)   # fslr_pial_L_path <- get_surface_template(template_id = \"fsLR\", surface_type = \"pial\",   #                                        hemi = \"L\", density = \"32k\")   # print(fslr_pial_L_path)    # Get the white surface for fsaverage6 (res=\"06\", den=\"41k\") right hemisphere   # fsaverage6_white_R_path <- get_surface_template(template_id = \"fsaverage\",   #                                               surface_type = \"white\",   #                                               hemi = \"R\",   #                                               resolution = \"06\", # for fsaverage6   #                                               density = \"41k\")   # for fsaverage6   # print(fsaverage6_white_R_path) # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_brainmask.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Brain Mask from Template (DEPRECATED) — get_template_brainmask","title":"Get Brain Mask from Template (DEPRECATED) — get_template_brainmask","text":"\\strongDEPRECATED: Please use get_template(variant = \"mask\", ...) instead. Convenience function retrieve binary brain mask specified template.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_brainmask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Brain Mask from Template (DEPRECATED) — get_template_brainmask","text":"","code":"get_template_brainmask(   name = \"MNI152NLin2009cAsym\",   resolution = 1,   extension = \".nii.gz\" )"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_brainmask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Brain Mask from Template (DEPRECATED) — get_template_brainmask","text":"name Character string specifying template name. Default: \"MNI152NLin2009cAsym\" resolution Numeric resolution mm. Default: 1 extension Character string specifying file extension. Default: \".nii.gz\"","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_brainmask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Brain Mask from Template (DEPRECATED) — get_template_brainmask","text":"NeuroVol object containing binary brain mask","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_csf.html","id":null,"dir":"Reference","previous_headings":"","what":"Get CSF Probability Map (DEPRECATED) — get_template_csf","title":"Get CSF Probability Map (DEPRECATED) — get_template_csf","text":"\\strongDEPRECATED: Please use get_template(variant = \"probseg\", label = \"CSF\", ...) instead. Convenience function get CSF probability map.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_csf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get CSF Probability Map (DEPRECATED) — get_template_csf","text":"","code":"get_template_csf(   name = \"MNI152NLin2009cAsym\",   resolution = 1,   extension = \".nii.gz\" )"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_csf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get CSF Probability Map (DEPRECATED) — get_template_csf","text":"name Character string specifying template name. Default: \"MNI152NLin2009cAsym\" resolution Numeric resolution mm. Default: 1 extension Character string specifying file extension. Default: \".nii.gz\"","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_csf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get CSF Probability Map (DEPRECATED) — get_template_csf","text":"NeuroVol object containing CSF probability map","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_gm.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Gray Matter Probability Map (DEPRECATED) — get_template_gm","title":"Get Gray Matter Probability Map (DEPRECATED) — get_template_gm","text":"\\strongDEPRECATED: Please use get_template(variant = \"probseg\", label = \"GM\", ...) instead. Convenience function get gray matter probability map.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_gm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Gray Matter Probability Map (DEPRECATED) — get_template_gm","text":"","code":"get_template_gm(   name = \"MNI152NLin2009cAsym\",   resolution = 1,   extension = \".nii.gz\" )"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_gm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Gray Matter Probability Map (DEPRECATED) — get_template_gm","text":"name Character string specifying template name. Default: \"MNI152NLin2009cAsym\" resolution Numeric resolution mm. Default: 1 extension Character string specifying file extension. Default: \".nii.gz\"","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_gm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Gray Matter Probability Map (DEPRECATED) — get_template_gm","text":"NeuroVol object containing gray matter probability map","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_head.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Template Head Image (DEPRECATED) — get_template_head","title":"Get Template Head Image (DEPRECATED) — get_template_head","text":"\\strongDEPRECATED: Please use get_template(variant = \"head\", ...) instead. Convenience function get full head (non-brain-extracted) template.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_head.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Template Head Image (DEPRECATED) — get_template_head","text":"","code":"get_template_head(   name = \"MNI152NLin2009cAsym\",   resolution = 1,   extension = \".nii.gz\" )"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_head.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Template Head Image (DEPRECATED) — get_template_head","text":"name Character string specifying template name. Default: \"MNI152NLin2009cAsym\" resolution Numeric resolution mm. Default: 1 extension Character string specifying file extension. Default: \".nii.gz\"","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_head.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Template Head Image (DEPRECATED) — get_template_head","text":"NeuroVol object containing head template","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_legacy.html","id":null,"dir":"Reference","previous_headings":"","what":"Access Templateflow Brain Templates (DEPRECATED - Legacy Signature) — get_template_legacy","title":"Access Templateflow Brain Templates (DEPRECATED - Legacy Signature) — get_template_legacy","text":"\\strongDEPRECATED: function signature deprecated. Please use new get_template function offers comprehensive R-native interface. new function handles common variants modalities directly.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_legacy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access Templateflow Brain Templates (DEPRECATED - Legacy Signature) — get_template_legacy","text":"","code":"get_template_legacy(   name = \"MNI152NLin2009cAsym\",   desc = \"brain\",   resolution = 1,   label = NULL,   atlas = NULL,   suffix = \"T1w\",   extension = \".nii.gz\" )"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_legacy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access Templateflow Brain Templates (DEPRECATED - Legacy Signature) — get_template_legacy","text":"name Character string specifying template name. Default: \"MNI152NLin2009cAsym\" desc Character string describing template variant. Default: \"brain\" resolution Numeric resolution mm. Default: 1 label Character string specifying tissue label probability maps atlas Character string specifying atlas name suffix Character string specifying image type. Default: \"T1w\" extension Character string specifying file extension. Default: \".nii.gz\"","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_legacy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access Templateflow Brain Templates (DEPRECATED - Legacy Signature) — get_template_legacy","text":"NeuroVol object containing requested template","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_probseg.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Tissue Probability Map from Template (DEPRECATED) — get_template_probseg","title":"Get Tissue Probability Map from Template (DEPRECATED) — get_template_probseg","text":"\\strongDEPRECATED: Please use get_template(variant = \"probseg\", label = ..., ...) instead. Retrieves probability maps different tissue types (GM, WM, CSF).","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_probseg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Tissue Probability Map from Template (DEPRECATED) — get_template_probseg","text":"","code":"get_template_probseg(   name = \"MNI152NLin2009cAsym\",   label = \"GM\",   resolution = 1,   extension = \".nii.gz\" )"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_probseg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Tissue Probability Map from Template (DEPRECATED) — get_template_probseg","text":"name Character string specifying template name. Default: \"MNI152NLin2009cAsym\" label Character string specifying tissue type (\"GM\", \"WM\", \"CSF\"). Default: \"GM\" resolution Numeric resolution mm. Default: 1 extension Character string specifying file extension. Default: \".nii.gz\"","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_probseg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Tissue Probability Map from Template (DEPRECATED) — get_template_probseg","text":"NeuroVol object containing probability map","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_schaefer.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Schaefer Parcellation in Template Space (DEPRECATED) — get_template_schaefer","title":"Get Schaefer Parcellation in Template Space (DEPRECATED) — get_template_schaefer","text":"\\strongDEPRECATED: Please use get_template(atlas = \"Schaefer2018\", desc = ..., suffix = \"dseg\", ...) instead. Retrieves Schaefer cortical parcellation mapped specified template space.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_schaefer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Schaefer Parcellation in Template Space (DEPRECATED) — get_template_schaefer","text":"","code":"get_template_schaefer(   name = \"MNI152NLin2009cAsym\",   resolution = 1,   parcels = 400,   networks = 17,   extension = \".nii.gz\" )"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_schaefer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Schaefer Parcellation in Template Space (DEPRECATED) — get_template_schaefer","text":"name Character string specifying template name. Default: \"MNI152NLin2009cAsym\" resolution Numeric resolution mm. Default: 1 parcels Number parcels (400 default) networks Number networks (17 default) extension Character string specifying file extension. Default: \".nii.gz\"","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_schaefer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Schaefer Parcellation in Template Space (DEPRECATED) — get_template_schaefer","text":"NeuroVol object containing parcellation","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_wm.html","id":null,"dir":"Reference","previous_headings":"","what":"Get White Matter Probability Map (DEPRECATED) — get_template_wm","title":"Get White Matter Probability Map (DEPRECATED) — get_template_wm","text":"\\strongDEPRECATED: Please use get_template(variant = \"probseg\", label = \"WM\", ...) instead. Convenience function get white matter probability map.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_wm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get White Matter Probability Map (DEPRECATED) — get_template_wm","text":"","code":"get_template_wm(   name = \"MNI152NLin2009cAsym\",   resolution = 1,   extension = \".nii.gz\" )"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_wm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get White Matter Probability Map (DEPRECATED) — get_template_wm","text":"name Character string specifying template name. Default: \"MNI152NLin2009cAsym\" resolution Numeric resolution mm. Default: 1 extension Character string specifying file extension. Default: \".nii.gz\"","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/get_template_wm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get White Matter Probability Map (DEPRECATED) — get_template_wm","text":"NeuroVol object containing white matter probability map","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/ggseg_schaefer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Interactive Schaefer Atlas Visualization — ggseg_schaefer","title":"Create Interactive Schaefer Atlas Visualization — ggseg_schaefer","text":"Creates interactive visualization Schaefer atlas using ggseg, optional value mapping customizable appearance.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/ggseg_schaefer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Interactive Schaefer Atlas Visualization — ggseg_schaefer","text":"","code":"ggseg_schaefer(   atlas,   vals,   thresh = c(0, 0),   pos = FALSE,   palette = \"Spectral\",   interactive = TRUE,   lim = range(vals) )"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/ggseg_schaefer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Interactive Schaefer Atlas Visualization — ggseg_schaefer","text":"atlas atlas object containing Schaefer parcellation information vals Numeric vector values visualize atlas thresh Numeric vector length 2 specifying (min, max) thresholds. Values outside range set NA. Default: c(0,0) pos Logical. TRUE, uses raw values; FALSE, uses absolute values thresholding. Default: FALSE palette Character string specifying color palette use. Default: \"Spectral\" interactive Logical. TRUE, creates interactive plot tooltips. Default: TRUE lim Numeric vector length 2 specifying range color mapping. Default: range(vals)","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/ggseg_schaefer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Interactive Schaefer Atlas Visualization — ggseg_schaefer","text":"ggplot2 object (interactive=FALSE) ggiraph object   (interactive=TRUE) showing visualization","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/ggseg_schaefer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Interactive Schaefer Atlas Visualization — ggseg_schaefer","text":"","code":"if (FALSE) { # \\dontrun{ # Load Schaefer atlas atlas <- get_schaefer_atlas(\"7networks\", 100)  # Create random values for visualization vals <- rnorm(100)  # Create interactive plot ggseg_schaefer(atlas, vals)  # Create static plot with custom thresholds ggseg_schaefer(atlas, vals, thresh=c(-1, 1), interactive=FALSE) } # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/install_templateflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Install Templateflow Python package — install_templateflow","title":"Install Templateflow Python package — install_templateflow","text":"Installs Python packages `scipy` `templateflow` via reticulate::py_install. Use helper Templateflow resources required fetching templates.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/install_templateflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install Templateflow Python package — install_templateflow","text":"","code":"install_templateflow(method = \"auto\", conda = \"auto\")"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/install_templateflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install Templateflow Python package — install_templateflow","text":"method Installation method passed reticulate::py_install. Defaults \"auto\". conda Path conda executable \"auto\" let reticulate locate one.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/install_templateflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install Templateflow Python package — install_templateflow","text":"Invisible NULL indicating success.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/install_templateflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install Templateflow Python package — install_templateflow","text":"","code":"# \\donttest{ install_templateflow() #> Using Python: /usr/bin/python3.12 #> Creating virtual environment '~/.virtualenvs/r-reticulate' ...  #> + /usr/bin/python3.12 -m venv /home/runner/.virtualenvs/r-reticulate #> Done! #> Installing packages: pip, wheel, setuptools #> + /home/runner/.virtualenvs/r-reticulate/bin/python -m pip install --upgrade pip wheel setuptools #> Virtual environment '~/.virtualenvs/r-reticulate' successfully created. #> Using virtual environment '~/.virtualenvs/r-reticulate' ... #> + /home/runner/.virtualenvs/r-reticulate/bin/python -m pip install --upgrade --no-user scipy #> Using virtual environment '/home/runner/.virtualenvs/r-reticulate' ... #> + /home/runner/.virtualenvs/r-reticulate/bin/python -m pip install --upgrade --no-user templateflow # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/map_atlas.html","id":null,"dir":"Reference","previous_headings":"","what":"Map values to an atlas — map_atlas","title":"Map values to an atlas — map_atlas","text":"Maps set values regions/parcels atlas object. can used visualize data (like statistics measurements) across atlas regions.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/map_atlas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map values to an atlas — map_atlas","text":"","code":"map_atlas(x, vals, thresh, ...)  # S3 method for class 'atlas' map_atlas(x, vals, thresh = c(0, 0), pos = FALSE, ...)  # S3 method for class 'glasser' map_atlas(x, vals, thresh = c(0, 0), pos = FALSE, ...)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/map_atlas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map values to an atlas — map_atlas","text":"x atlas object map values onto vals Numeric vector values map atlas regions. Length match number regions atlas thresh Optional numeric vector length 2 specifying (min, max) thresholds mapped values. Values outside range clamped. ... Additional arguments passed methods pos Logical. `TRUE`, values thresholded using raw values; otherwise absolute values used.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/map_atlas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map values to an atlas — map_atlas","text":"Returns atlas object mapped values","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/map_atlas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map values to an atlas — map_atlas","text":"","code":"if (FALSE) { # \\dontrun{ # Load the aseg atlas atlas <- get_aseg_atlas() vals <- rnorm(length(atlas$orig_labels))  # Map values with a threshold of -2 to 2 mapped <- map_atlas(atlas, vals, thresh = c(-2, 2)) } # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/map_to_schaefer.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Values to Schaefer Atlas Format — map_to_schaefer","title":"Map Values to Schaefer Atlas Format — map_to_schaefer","text":"Converts values associated atlas regions format suitable visualization Schaefer atlas ggseg.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/map_to_schaefer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Values to Schaefer Atlas Format — map_to_schaefer","text":"","code":"map_to_schaefer(atlas, vals, thresh = c(0, 0), pos = FALSE)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/map_to_schaefer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Values to Schaefer Atlas Format — map_to_schaefer","text":"atlas atlas object containing Schaefer parcellation information vals Numeric vector values map atlas regions thresh Numeric vector length 2 specifying (min, max) thresholds. Values outside range set NA. Default: c(0,0) pos Logical. TRUE, uses raw values; FALSE, uses absolute values thresholding. Default: FALSE","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/map_to_schaefer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Values to Schaefer Atlas Format — map_to_schaefer","text":"tibble mapped values suitable ggseg visualization","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/merge_atlases.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Two Brain Atlases — merge_atlases","title":"Merge Two Brain Atlases — merge_atlases","text":"Combines two brain atlases single unified atlas object, preserving region information adjusting region IDs prevent conflicts. useful creating composite atlases combine different parcellation schemes.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/merge_atlases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Two Brain Atlases — merge_atlases","text":"","code":"merge_atlases(atlas1, atlas2)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/merge_atlases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Two Brain Atlases — merge_atlases","text":"atlas1 first atlas object merge atlas2 second atlas object merge","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/merge_atlases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Two Brain Atlases — merge_atlases","text":"new atlas object containing: name Combined names input atlases (atlas1::atlas2) atlas Combined ClusteredNeuroVol object cmap Combined colormap regions ids Adjusted vector region IDs labels Combined vector region labels orig_labels Original labels atlases hemi Combined hemisphere designations","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/merge_atlases.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge Two Brain Atlases — merge_atlases","text":"merging process: Verifies atlases dimensions Adjusts region IDs second atlas avoid overlap Combines color maps, labels, hemisphere information Creates new ClusteredNeuroVol object merged atlas","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/merge_atlases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Two Brain Atlases — merge_atlases","text":"","code":"if (FALSE) { # \\dontrun{ # Load two atlases atlas1 <- get_aseg_atlas() atlas2 <- get_aseg_atlas()  # Merge the atlases merged <- merge_atlases(atlas1, atlas2)  # Check the combined regions print(merged) } # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/names.templateflow.html","id":null,"dir":"Reference","previous_headings":"","what":"List Attributes of the TemplateFlow API Object — names.templateflow","title":"List Attributes of the TemplateFlow API Object — names.templateflow","text":"Lists names attributes methods available underlying Python TemplateFlow API object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/names.templateflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Attributes of the TemplateFlow API Object — names.templateflow","text":"","code":"# S3 method for class 'templateflow' names(x)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/names.templateflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Attributes of the TemplateFlow API Object — names.templateflow","text":"x object class templateflow.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/names.templateflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Attributes of the TemplateFlow API Object — names.templateflow","text":"character vector available attribute method names.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/names.templateflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Attributes of the TemplateFlow API Object — names.templateflow","text":"","code":"if (FALSE) { # \\dontrun{   # Ensure Python and templateflow module are available   if (reticulate::py_available(initialize = TRUE) &&        reticulate::py_module_available(\"templateflow\")) {     tf <- create_templateflow()     # print(names(tf))    } else {     message(\"Python or templateflow module not available. Skipping example.\")   } } # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/neuroatlas-package.html","id":null,"dir":"Reference","previous_headings":"","what":"neuroatlas: Neuroimaging Atlases and Parcellations — neuroatlas-package","title":"neuroatlas: Neuroimaging Atlases and Parcellations — neuroatlas-package","text":"Provides unified interface access work various neuroimaging atlases parcellations including Schaefer, Glasser, FreeSurfer ASEG, Olsen MTL atlases. Integrates TemplateFlow standardized template access supports visualization ggseg ecosystem. neuroatlas package provides unified interface access work various neuroimaging atlases parcellations. includes support cortical atlases (Schaefer, Glasser), subcortical segmentations (FreeSurfer ASEG), specialized atlases (Olsen MTL). package integrates TemplateFlow standardized template access supports visualization ggseg ecosystem.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/neuroatlas-package.html","id":"main-functions","dir":"Reference","previous_headings":"","what":"Main Functions","title":"neuroatlas: Neuroimaging Atlases and Parcellations — neuroatlas-package","text":"get_schaefer_atlas Access Schaefer cortical parcellations get_glasser_atlas Access Glasser multi-modal parcellation get_aseg_atlas Access FreeSurfer subcortical segmentation get_olsen_mtl Access Olsen medial temporal lobe atlas get_template Fetch templates TemplateFlow","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/neuroatlas-package.html","id":"atlas-operations","dir":"Reference","previous_headings":"","what":"Atlas Operations","title":"neuroatlas: Neuroimaging Atlases and Parcellations — neuroatlas-package","text":"get_roi Extract specific regions atlas map_atlas Map values atlas regions reduce_atlas Combine regions within atlas merge_atlases Combine multiple atlases dilate_atlas Expand atlas regions unassigned voxels","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/neuroatlas-package.html","id":"visualization","dir":"Reference","previous_headings":"","what":"Visualization","title":"neuroatlas: Neuroimaging Atlases and Parcellations — neuroatlas-package","text":"package integrates ggseg brain visualization: plot.atlas Plot atlas objects ggseg_schaefer Visualize Schaefer parcellations ggseg","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/neuroatlas-package.html","id":"templateflow-integration","dir":"Reference","previous_headings":"","what":"TemplateFlow Integration","title":"neuroatlas: Neuroimaging Atlases and Parcellations — neuroatlas-package","text":"Access standardized neuroimaging templates: create_templateflow Initialize TemplateFlow connection tflow_spaces List available template spaces install_templateflow Install Python TemplateFlow module","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/neuroatlas-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"neuroatlas: Neuroimaging Atlases and Parcellations — neuroatlas-package","text":"Maintainer: Bradley Buchsbaum brad.buchsbaum@gmail.com (ORCID)","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/olsen_mtl.html","id":null,"dir":"Reference","previous_headings":"","what":"Olsen Medial Temporal Lobe Atlas — olsen_mtl","title":"Olsen Medial Temporal Lobe Atlas — olsen_mtl","text":"detailed parcellation atlas medial temporal lobe (MTL) regions, including hippocampus surrounding cortical areas, based work Rosanna Olsen colleagues.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/olsen_mtl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Olsen Medial Temporal Lobe Atlas — olsen_mtl","text":"","code":"olsen_mtl"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/olsen_mtl.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Olsen Medial Temporal Lobe Atlas — olsen_mtl","text":"list class 'atlas' containing: name Character string identifying atlas atlas NeuroVol object containing parcellation 1mm MNI space labels Character vector anatomical region labels orig_labels Full region labels including hemisphere information ids Integer vector region IDs (1:16) hemi Character vector indicating hemisphere ('left' 'right')","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/olsen_mtl.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Olsen Medial Temporal Lobe Atlas — olsen_mtl","text":"Olsen, R. K., et al. (2013). role relational binding item memory: Evidence face recognition case developmental amnesia. Journal Neuroscience, 33(36), 14107-14111.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/olsen_mtl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Olsen Medial Temporal Lobe Atlas — olsen_mtl","text":"atlas provides detailed segmentation MTL structures MNI space 1mm resolution. includes bilateral parcellation : Hippocampal subfields Perirhinal cortex Entorhinal cortex Parahippocampal cortex","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/olsen_mtl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Olsen Medial Temporal Lobe Atlas — olsen_mtl","text":"","code":"# \\donttest{ # Load the atlas data data(olsen_mtl)  # View available regions olsen_mtl$labels #>  [1] \"Ant_Hipp\"  \"CA1\"       \"CA3_DG\"    \"ERC\"       \"PHC\"       \"Post_Hipp\" #>  [7] \"PRC\"       \"Sub\"       \"Ant_Hipp\"  \"CA1\"       \"CA3_DG\"    \"ERC\"       #> [13] \"PHC\"       \"Post_Hipp\" \"PRC\"       \"Sub\"        # Check distribution across hemispheres table(olsen_mtl$hemi) #>  #>  left right  #>     8     8  # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/plot-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Glasser Atlas — plot.atlas","title":"Plot Glasser Atlas — plot.atlas","text":"Creates interactive visualization Glasser atlas mapped values using ggseg ggiraph. Plot methods various atlas objects neuroatlas package","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/plot-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Glasser Atlas — plot.atlas","text":"","code":"# S3 method for class 'atlas' plot(x, y, ...)  # S3 method for class 'glasser' plot(   x,   y,   vals = NULL,   thresh = c(0, 0),   pos = FALSE,   position = \"stacked\",   colour = \"gray\",   guide = TRUE,   palette = \"cork\",   lim = NULL,   ... )"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/plot-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Glasser Atlas — plot.atlas","text":"x atlas object (atlas, glasser, schaefer, etc.) y Ignored (required S3 consistency) ... Additional arguments passed specific plot implementations vals Numeric vector values visualize. NULL (default), regions assigned value 1, creating uniform visualization thresh Numeric vector length 2 thresholding values pos Logical. TRUE, uses raw values thresholding position Character. Layout type (\"stacked\" \"dispersed\") colour Character. Border color regions guide Logical. Whether show color guide palette Character. Name scico color palette lim Numeric vector length 2 color scale limits. NULL, set range vals","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/plot-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Glasser Atlas — plot.atlas","text":"ggiraph interactive plot object plot object (specific type depends atlas)","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/plot_glasser.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Glasser Atlas Values — plot_glasser","title":"Plot Glasser Atlas Values — plot_glasser","text":"Creates interactive visualization values mapped onto Glasser atlas using echarts4r. visualization shows hemispheres lateral medial views, arranged 2x2 grid.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/plot_glasser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Glasser Atlas Values — plot_glasser","text":"","code":"plot_glasser(vals = NULL, value_col = \"value\", position = \"dispersed\")"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/plot_glasser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Glasser Atlas Values — plot_glasser","text":"vals data frame containing values plot, must include columns: label: character, matching ggseg Glasser atlas labels (e.g., \"lh_L_V1\") value: numeric, values visualize region NULL (default), regions assigned value 1 value_col Character string specifying name column vals containing values plot. Defaults \"value\" position Character string specifying layout type. Currently \"dispersed\" supported (stacked layout planned future versions)","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/plot_glasser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Glasser Atlas Values — plot_glasser","text":"echarts4r visualization object containing 2x2 grid brain views","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/plot_glasser.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Glasser Atlas Values — plot_glasser","text":"","code":"if (FALSE) { # \\dontrun{ # Basic visualization with uniform coloring plot_glasser()  # Create sample data vals <- data.frame(   label = ggsegGlasser::glasser$data$label,   value = rnorm(nrow(ggsegGlasser::glasser$data)) )  # Plot the data plot_glasser(vals)  # Using a different column name vals$intensity <- vals$value plot_glasser(vals, value_col = \"intensity\") } # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/print-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Methods for neuroatlas Objects — print.atlas","title":"Print Methods for neuroatlas Objects — print.atlas","text":"Print methods various atlas objects neuroatlas package","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/print-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Methods for neuroatlas Objects — print.atlas","text":"","code":"# S3 method for class 'atlas' print(x, ...)  # S3 method for class 'glasser' print(x, ...)  # S3 method for class 'schaefer' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/print-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Methods for neuroatlas Objects — print.atlas","text":"x atlas object (atlas, glasser, schaefer, etc.) ... Additional arguments passed print","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/print-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Methods for neuroatlas Objects — print.atlas","text":"object returned invisibly","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/print.templateflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a TemplateFlow Object — print.templateflow","title":"Print a TemplateFlow Object — print.templateflow","text":"Provides brief summary TemplateFlow interface object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/print.templateflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a TemplateFlow Object — print.templateflow","text":"","code":"# S3 method for class 'templateflow' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/print.templateflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a TemplateFlow Object — print.templateflow","text":"x object class templateflow. ... Additional arguments (unused).","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/reduce_atlas.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce a NeuroVol or NeuroVec by an Atlas — reduce_atlas","title":"Reduce a NeuroVol or NeuroVec by an Atlas — reduce_atlas","text":"Applies summary function data within ROI defined atlas. S3 generic function.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/reduce_atlas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce a NeuroVol or NeuroVec by an Atlas — reduce_atlas","text":"","code":"reduce_atlas(atlas, data_vol, stat_func, ...)  # S3 method for class 'atlas' reduce_atlas(atlas, data_vol, stat_func, ...)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/reduce_atlas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce a NeuroVol or NeuroVec by an Atlas — reduce_atlas","text":"atlas atlas object another object method defined. data_vol NeuroVol (3D) NeuroVec (4D) data summarized. 3D volume supplied result contains single row; 4D inputs yield one row per time point. stat_func function apply data within ROI (e.g., mean, sd, sum). ... Additional arguments passed stat_func.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/reduce_atlas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce a NeuroVol or NeuroVec by an Atlas — reduce_atlas","text":"tibble one column per ROI. NeuroVec inputs   time column indexes volume.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/reduce_atlas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduce a NeuroVol or NeuroVec by an Atlas — reduce_atlas","text":"","code":"if (FALSE) { # \\dontrun{ # Load an atlas atlas <- get_schaefer_atlas(parcels = \"200\", networks = \"7\")  # Create example data (random values in brain space) brain_data <- neuroim2::NeuroVol(rnorm(prod(dim(atlas$atlas))),                                  space = space(atlas$atlas))  # Compute mean values within each atlas region region_means <- reduce_atlas(atlas, brain_data, mean)  # Compute standard deviation within each region region_sds <- reduce_atlas(atlas, brain_data, sd, na.rm = TRUE) } # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/resample.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample Volume to New Space — resample","title":"Resample Volume to New Space — resample","text":"Resamples volume new space optional smoothing parcel boundaries. particularly useful atlas parcellations maintaining discrete labels important.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/resample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample Volume to New Space — resample","text":"","code":"resample(   vol,   outspace,   smooth = FALSE,   interp = 0,   radius = NULL,   min_neighbors = 3 )"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/resample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample Volume to New Space — resample","text":"vol NeuroVol object resampled outspace NeuroSpace object specifying target space smooth Logical. Whether apply boundary smoothing resampling. Default: FALSE interp Integer. Interpolation method (0=nearest neighbor, 1=linear). Default: 0 radius Numeric. Radius smoothing neighborhood voxels. NULL, uses max(spacing)+0.5. Default: NULL min_neighbors Integer. Minimum number neighbors required smoothing. Default: 3","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/resample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample Volume to New Space — resample","text":"resampled NeuroVol object new space","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/resample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resample Volume to New Space — resample","text":"resampling process: First performs nearest-neighbor interpolation new space Optionally smooths boundaries using local majority voting scheme Preserves zeros mask (background)","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/show_templateflow_cache_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Show neuroatlas TemplateFlow Cache Path — show_templateflow_cache_path","title":"Show neuroatlas TemplateFlow Cache Path — show_templateflow_cache_path","text":"Returns path `neuroatlas` package's cache directory used TemplateFlow downloads. typically located within path returned `tools::R_user_dir(\"neuroatlas\", \"cache\")`, subdirectory named \"templateflow\".","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/show_templateflow_cache_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show neuroatlas TemplateFlow Cache Path — show_templateflow_cache_path","text":"","code":"show_templateflow_cache_path()"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/show_templateflow_cache_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show neuroatlas TemplateFlow Cache Path — show_templateflow_cache_path","text":"character string representing path TemplateFlow cache directory.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/show_templateflow_cache_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show neuroatlas TemplateFlow Cache Path — show_templateflow_cache_path","text":"","code":"cat(\"TemplateFlow cache is at:\", show_templateflow_cache_path(), \"\\n\") #> TemplateFlow cache is at: /home/runner/.cache/R/neuroatlas/templateflow"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/sub-sub-.templateflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Access Attributes of the TemplateFlow Object using [[ — [[.templateflow","title":"Access Attributes of the TemplateFlow Object using [[ — [[.templateflow","text":"Allows R-native access (via [[) attributes methods underlying Python TemplateFlow API object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/sub-sub-.templateflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access Attributes of the TemplateFlow Object using [[ — [[.templateflow","text":"","code":"# S3 method for class 'templateflow' x[[name]]"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/sub-sub-.templateflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access Attributes of the TemplateFlow Object using [[ — [[.templateflow","text":"x object class templateflow. name name attribute method access Python object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/sub-sub-.templateflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access Attributes of the TemplateFlow Object using [[ — [[.templateflow","text":"attribute method Python TemplateFlow API object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/sub-sub-.templateflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access Attributes of the TemplateFlow Object using [[ — [[.templateflow","text":"","code":"if (FALSE) { # \\dontrun{   # Ensure Python and templateflow module are available   if (reticulate::py_available(initialize = TRUE) &&        reticulate::py_module_available(\"templateflow\")) {     tf <- create_templateflow()     # Example: Access the 'get' method (it's a Python function)     # print(tf[[\"get\"]])    } else {     message(\"Python or templateflow module not available. Skipping example.\")   } } # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/templates.html","id":null,"dir":"Reference","previous_headings":"","what":"List Available Templates — templates","title":"List Available Templates — templates","text":"Returns list available templates Templateflow repository.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/templates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Available Templates — templates","text":"","code":"templates()"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/templates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Available Templates — templates","text":"character vector available template names","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/tflow_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Find TemplateFlow Files Matching Metadata Criteria — tflow_files","title":"Find TemplateFlow Files Matching Metadata Criteria — tflow_files","text":"Retrieves list file paths TemplateFlow match given template space optional metadata query parameters. function calls Python `templateflow.api.get()` method `raise_on_empty=FALSE` get list matching files.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/tflow_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find TemplateFlow Files Matching Metadata Criteria — tflow_files","text":"","code":"tflow_files(space, query_args = list(), api_handle = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/tflow_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find TemplateFlow Files Matching Metadata Criteria — tflow_files","text":"space Character string. primary TemplateFlow identifier template space (e.g., \"MNI152NLin2009cAsym\"). passed `template` Python API. query_args (Optional) named list additional query parameters filter results (e.g., `list(suffix = \"T1w\", resolution = \"1\", desc = \"brain\")`). passed directly keyword arguments Python `templateflow.api.get()`. api_handle (Optional) existing `templateflow` S3 object created `create_templateflow()`. `NULL`, default one initialized.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/tflow_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find TemplateFlow Files Matching Metadata Criteria — tflow_files","text":"character vector file paths matching query. Returns empty   vector files match, `NULL` warning API call fails.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/tflow_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find TemplateFlow Files Matching Metadata Criteria — tflow_files","text":"","code":"# \\donttest{   # List all T1w files for MNI152NLin2009cAsym template   # mni_t1w_files <- tflow_files(\"MNI152NLin2009cAsym\",    #                                           query_args = list(suffix = \"T1w\"))   # print(mni_t1w_files)      # List all files for the OASIS30ANTs template with desc \"brain\"   # oasis_brains <- tflow_files(\"OASIS30ANTs\",    #                                           query_args = list(desc = \"brain\"))   # print(oasis_brains) # }"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/tflow_spaces.html","id":null,"dir":"Reference","previous_headings":"","what":"List Available TemplateFlow Template Spaces — tflow_spaces","title":"List Available TemplateFlow Template Spaces — tflow_spaces","text":"Retrieves list available template space identifiers TemplateFlow archive. identifiers top-level names like \"MNI152NLin2009cAsym\", \"fsLR\", etc.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/tflow_spaces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Available TemplateFlow Template Spaces — tflow_spaces","text":"","code":"tflow_spaces(pattern = NULL, api_handle = NULL, ...)"},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/tflow_spaces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Available TemplateFlow Template Spaces — tflow_spaces","text":"pattern (Optional) character string containing regular expression filter template space names. `NULL` (default), names returned. api_handle (Optional) existing `templateflow` S3 object created `create_templateflow()`. `NULL`, default one initialized. ... Additional arguments passed `grep` `pattern` specified (e.g., `ignore.case = TRUE`).","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/tflow_spaces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Available TemplateFlow Template Spaces — tflow_spaces","text":"character vector available template space names. Returns `NULL`   list retrieved, warning.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/reference/tflow_spaces.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Available TemplateFlow Template Spaces — tflow_spaces","text":"","code":"# \\donttest{   # List all template spaces   # all_spaces <- tflow_spaces()   # print(head(all_spaces))      # List template spaces containing \"MNI\"   # mni_spaces <- tflow_spaces(pattern = \"MNI\")   # print(mni_spaces) # }"},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"overall-goal","dir":"","previous_headings":"","what":"Overall Goal","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"Create R-native, robust, user-friendly interface TemplateFlow, abstracting away reticulate details, enhancing caching, discoverability, integration within neuroatlas.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"id_11-central-templateflow-s3-object","dir":"","previous_headings":"1. Architecture & Core Wrapper","what":"1.1. Central templateflow S3 Object","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"T1.1.1: Define S3 class templateflow. Initializes stores reticulate Python templateflow.api handle (e.g., tf_api). Establishes stores local cache path (e.g., using tools::R_user_dir(\"neuroatlas\", \"cache\", \"templateflow\")). Stores user-configurable options (e.g., default template, verbosity level). Shows basic info: TemplateFlow library path, cache path, online status. Lists example available templates summary discoverability (see Section 5). T1.1.4: Implement $.templateflow S3 method dynamic, R-native access TemplateFlow entities (e.g., tf$MNI152NLin2009cAsym). internally chain calls Python API. T1.1.5: Implement [[.templateflow S3 method alternative programmatic access. T1.1.6: (Optional) Implement names.templateflow list available top-level attributes (e.g., template names accessible via $).","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"id_12-auto-conversion--utility-helpers","dir":"","previous_headings":"1. Architecture & Core Wrapper","what":"1.2. Auto-conversion & Utility Helpers","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"Accepts Python Nifti object path strings, nibabel.Nifti1Image objects. Converts neuroim2::NeuroVol object. Handles potential errors conversion gracefully. T1.2.2: Integrate memoise as_neurovol involves re-reading disk path within session, directly file fetching part get_template.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"id_21-unified-get_template-function","dir":"","previous_headings":"2. Retrieval API (High-Level Helper Functions)","what":"2.1. Unified get_template() Function","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"space: Template identifier (e.g., “MNI152NLin2009cAsym”). variant: High-level type (e.g., “brain”, “head”, “probseg”, “mask”, “dseg”). Replaces desc common cases allows desc full specificity. modality: Image type (e.g., “T1w”, “T2w”, “dwi”). Replaces suffix common cases. resolution: Numeric resolution mm. cohort, desc, label, atlas, suffix, extension: Pass TemplateFlow fine-grained queries. path_only: TRUE, return file path string instead NeuroVol. use_cache: Boolean, enable/disable caching call. api_handle: Optionally pass existing templateflow S3 object (create_templateflow()) let use default/global one. ...: Additional arguments pass tflow$api$get(). T2.1.2: Internally, get_template() construct correct query dictionary tf_api$get(). E.g., variant = \"probseg\", label (tissue type like GM/WM/CSF) specifiable. E.g., variant = \"mask\" typically implies modality = \"mask\" (suffix=\"mask\"). T2.1.4: Ensure get_template() returns NeuroVol (via as_neurovol) file path string.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"id_22-typed-helper-functions-as-thin-wrappers","dir":"","previous_headings":"2. Retrieval API (High-Level Helper Functions)","what":"2.2. Typed Helper Functions (as thin wrappers)","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"T2.2.1: Refactor get_template_brainmask(...) wrapper around get_template(..., variant = \"mask\", modality = \"mask\"). T2.2.2: Refactor get_template_probseg(..., label) get_template(..., variant = \"probseg\", label = label). T2.2.3: Refactor get_template_gm(...) get_template(..., variant = \"probseg\", label = \"GM\"). T2.2.4: Refactor get_template_wm(...) get_template(..., variant = \"probseg\", label = \"WM\"). T2.2.5: Refactor get_template_csf(...) get_template(..., variant = \"probseg\", label = \"CSF\"). T2.2.6: Refactor get_template_head(...) get_template(..., variant = \"head\", modality = \"T1w\"). T2.2.7: Refactor get_template_schaefer(...) (TemplateFlow one) use new get_template() appropriate atlas, desc, suffix args. T2.2.8: Review original get_template() needs kept functionality fully superseded new get_template(). kept backward compatibility, mark deprecated.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"id_23-vectorized-retrieval-optional-enhancement","dir":"","previous_headings":"2. Retrieval API (High-Level Helper Functions)","what":"2.3. Vectorized Retrieval (Optional Enhancement)","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"T2.3.1: (Optional) Consider allowing vectorized arguments space, resolution, variant get_template(), returning named list NeuroVol objects paths.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"id_24-typed-helper-functions-for-volumes-and-surfaces","dir":"","previous_headings":"2. Retrieval API (High-Level Helper Functions)","what":"2.4 Typed Helper Functions for Volumes and Surfaces","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"T2.4.1: Implement get_volume_template(template, type, ...) wrapper. (Superseded get_template) T2.4.2: Implement get_surface_template(template_id, surface_type, hemi, ...) wrapper.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"id_31-cache-directory-management","dir":"","previous_headings":"3. Caching & Memoisation","what":"3.1. Cache Directory Management","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"T3.1.1: Implement internal function neuroatlas_cache_dir(subdir = NULL) uses tools::R_user_dir(\"neuroatlas\", \"cache\") creates subdir doesn’t exist. templateflow cache neuroatlas_cache_dir(\"templateflow\"). T3.1.2: Ensure tflow$api$get() downloads directed cache directory. TemplateFlow’s Python library caching; ensure R wrapper leverages R session-level memoisation complementary.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"id_32-session-level-memoisation","dir":"","previous_headings":"3. Caching & Memoisation","what":"3.2. Session-Level Memoisation","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"memoisation key unique, reproducible string derived query parameters (name, resolution, desc, label, etc.). T3.2.2: Ensure memoisation stores file path downloaded template. Subsequent calls template (read file) can use memoised path.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"id_33-cache-control-functions","dir":"","previous_headings":"3. Caching & Memoisation","what":"3.3. Cache Control Functions","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"T3.3.1: Implement clear_templateflow_cache() remove files neuroatlas_cache_dir(\"templateflow\"). T3.3.2: (Optional) Add show_templateflow_cache_path() function.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"id_41-pre-emptive-checks-and-graceful-errors","dir":"","previous_headings":"4. Error Handling & Validation","what":"4.1. Pre-emptive Checks and Graceful Errors","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"T4.1.1: get_template(), calling tf_api$get(), use tf_api$template_exists(space) similar check base template exists. T4.1.2: Validate resolution available resolutions template (e.g., using tf_api$resolutions(space) method exists, attempting fetch catching errors). T4.1.3: Wrap Python calls (tf_api$get(), etc.) tryCatch reticulate::py_capture_error convert Python exceptions R conditions (errors warnings). T4.1.4: Provide user-friendly R error messages (e.g., “Template ‘XYZ’ found.” “Resolution ‘R’mm available template ’XYZ’.”) instead raw Python tracebacks.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"id_42-offline-mode--cache-fallback","dir":"","previous_headings":"4. Error Handling & Validation","what":"4.2. Offline Mode & Cache Fallback","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"Note: Partially handled. Python errors caught; specific network error detection complex. Current behavior error fetch failure. Note: Handled memoise (R-level path cache) TemplateFlow Python’s disk cache (TEMPLATEFLOW_HOME). path/file previously fetched successfully, served caches without new network request. Note: Currently errors new item fetched (e.g. due network issues). Graceful NULL return require specific network error detection possibly new parameter get_template.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"id_5-discoverability-helper-functions","dir":"","previous_headings":"","what":"5. Discoverability Helper Functions","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"T5.1.1: Implement tflow_spaces(pattern = NULL) wrapping tf_api$templates(). general way query available files/metadata given template space. query_args list TemplateFlow parameters (desc, suffix, etc.) filter results. T5.1.3: Revisit print.templateflow (T1.1.3) make use listing functions informative summary.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"id_61-universal-template-input-in-neuroatlas","dir":"","previous_headings":"6. Inter-package Integration","what":"6.1. Universal Template Input in neuroatlas","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"T6.1.1: Identify neuroatlas functions currently accept NeuroVol objects templates (e.g., resampling targets, defining spaces). TemplateFlow query string (e.g., \"MNI152NLin2009cAsym:1mm:brain\"). list TemplateFlow query parameters (e.g., list(space=\"MNI\", resolution=1, variant=\"brain\")). Checks input already NeuroVol. input string list, parses calls new get_template() fetch NeuroVol. T6.1.4: Update get_schaefer_atlas(..., outspace) outspace can TemplateFlow query string/list, resolved via resolve_template_input(). T6.1.5: Update resample(vol, outspace, ...) outspace can TemplateFlow query string/list (primarily achieved get_schaefer_atlas passing resolved space). T6.1.6: Update dilate_atlas(atlas, mask, ...) mask can TemplateFlow query string/list, resolved via .resolve_template_input() fetch brain mask.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"id_7-documentation--vignettes","dir":"","previous_headings":"","what":"7. Documentation & Vignettes","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"T7.1.1: Write comprehensive roxygen2 documentation new unified get_template() function, explaining parameters common use cases. T7.1.2: Document new/refactored public functions (create_templateflow, tflow_spaces, tflow_files, clear_templateflow_cache, etc.). T7.2.1: Create new vignette: vignettes/working--templateflow.Rmd. Introduction TemplateFlow concept. Setting (e.g., create_templateflow()). Discovering available templates/metadata (tflow_spaces, tflow_files). Retrieving various template types (T1w, masks, probsegs) using get_template() typed helpers. Understanding caching behavior management. Examples integrating TemplateFlow templates neuroatlas functions (e.g., reduce_atlas, plotting functions applicable).","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"id_8-backward-compatibility-layer","dir":"","previous_headings":"","what":"8. Backward-Compatibility Layer","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"Mark @deprecate new=\"get_template\" (relevant new helper). Add @keywords internal longer intended direct user invocation deprecated. T8.1.2: Modify body old functions call new unified get_template() relevant new helper, ensuring parameters correctly mapped. T8.1.3: Ensure issue deprecation warning called (e.g., using lifecycle::deprecate_warn()).","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"m1-core-wrapper--foundational-retrieval","dir":"","previous_headings":"9. Implementation Milestones (Phased Rollout)","what":"M1: Core Wrapper & Foundational Retrieval","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"Target Tickets: T1.1.1, T1.1.2, T1.1.3, T1.2.1, T2.1.1 (basic implementation), T2.1.2, T2.1.4, T3.1.1, T4.1.3. Goal: Establish templateflow S3 object working, albeit basic, get_template() can fetch T1w image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"m2-full-retrieval-api--typed-helpers","dir":"","previous_headings":"9. Implementation Milestones (Phased Rollout)","what":"M2: Full Retrieval API & Typed Helpers","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"Target Tickets: T2.1.1 (full signature), T2.1.3, T2.2.1-T2.2.8, T8.1.1-T8.1.3 (functions wrapped). Goal: Complete get_template() API refactor existing typed helpers. Implement deprecation strategy.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"m3-caching-memoisation--discoverability","dir":"","previous_headings":"9. Implementation Milestones (Phased Rollout)","what":"M3: Caching, Memoisation & Discoverability","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"Target Tickets: T1.2.2, T3.1.2, T3.2.1, T3.2.2, T3.3.1, T3.3.2, T5.1.1, T5.1.2, T5.1.3, T1.1.4-T1.1.6. Goal: Implement robust caching session-level memoisation. Add functions users explore TemplateFlow resources. Flesh templateflow S3 object methods.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"m4-error-handling--validation","dir":"","previous_headings":"9. Implementation Milestones (Phased Rollout)","what":"M4: Error Handling & Validation","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"Target Tickets: T4.1.1, T4.1.2, T4.1.4, T4.2.1, T4.2.2, T4.2.3. Goal: Make interface resilient errors, offline scenarios, invalid user input.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"m5-inter-package-integration","dir":"","previous_headings":"9. Implementation Milestones (Phased Rollout)","what":"M5: Inter-package Integration","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"Target Tickets: T6.1.1, T6.1.2, T6.1.3, T6.1.4, T6.1.5. Goal: Enable seamless use TemplateFlow resources within neuroatlas functions.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"m6-documentation-vignette--final-deprecation","dir":"","previous_headings":"9. Implementation Milestones (Phased Rollout)","what":"M6: Documentation, Vignette & Final Deprecation","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"Target Tickets: T7.1.1, T7.1.2, T7.2.1, T7.2.2. Review deprecations. Goal: Provide comprehensive user guides ensure backward compatibility story clear.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/templateflow.html","id":"m7-final-review-testing--cleanup","dir":"","previous_headings":"9. Implementation Milestones (Phased Rollout)","what":"M7: Final Review, Testing & Cleanup","title":"TemplateFlow Interface Refactoring Plan & Tickets","text":"Target Tickets: Comprehensive unit tests new/refactored functions. Review remove helper code development (e.g. .create_schaefer_alias moved data-raw). Code style checks. CRAN pre-checks. Goal: Prepare stable release. detailed ticket list provide clear roadmap refactoring effort.","code":""},{"path":"https://bbuchsbaum.github.io/neuroatlas/news/index.html","id":"neuroatlas-010","dir":"Changelog","previous_headings":"","what":"neuroatlas 0.1.0","title":"neuroatlas 0.1.0","text":"Initial CRAN submission Schaefer cortical parcellations (100-1000 parcels, 7/17 networks) Glasser multi-modal parcellation (360 regions) FreeSurfer ASEG subcortical segmentation Olsen medial temporal lobe atlas Integrated TemplateFlow support standardized templates Added visualization support via ggseg echarts4r Implemented atlas operations: ROI extraction, data reduction, resampling Added comprehensive vignettes documentation","code":""}]
